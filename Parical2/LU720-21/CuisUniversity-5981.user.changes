

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (30 November 2023 11:55:33) as /home/matiascra/Documents/UBA/IS1/Parical2/CuisUniversity-5981.image!


----End fileIn of /home/matiascra/Documents/UBA/IS1/Parical2/Packages/TerseGuide.pck.st----!

----QUIT----(30 November 2023 11:56:45) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (30 November 2023 17:01:01) as /home/matiascra/Documents/UBA/IS1/Parical2/CuisUniversity-5981.image!


TestCase subclass: #XXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #XXTest category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 17:07:11'!
TestCase subclass: #XXTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!XXTest methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 17:17:37'!
test01! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:19:00' prior: 50653261!
test01
	| game |
	game := self create5x5Game.
	self assert: game playerIsAt: 0@0! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:19:05' prior: 50653264!
test01
	| game |
	game := self create5x5Game.
	self assert: (game playerIsAt: 0@0)! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:19:36' prior: 50653270!
test01
	| game |
	game := self create5x5Game startingColumn: 0.
	self assert: (game playerIsAt: 0@0)! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:19:51' prior: 50653276!
test01
	| game |
	game := self create5x5Game startingColumn: 0.
	self assert: (game playerIsAt: 0@0).! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:20:19' prior: 50653282!
test01
	| game |
	game := self create5x5Game startingColumn: 0.
	self assert: (game playerIsAt: 0@0).! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:20:33'!
test01PlayerCanStartAt0x0
	| game |
	game := self create5x5Game startingColumn: 0.
	self assert: (game playerIsAt: 0@0).! !

!methodRemoval: XXTest #test01 stamp: 'Matias Cra 11/30/2023 17:20:33'!
test01
	| game |
	game := self create5x5Game startingColumn: 0.
	self assert: (game playerIsAt: 0@0).!
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:20:52'!
create5x5Game: aColumnNumber! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:21:00' prior: 50653294!
test01PlayerCanStartAt0x0
	| game |
	game := self create5x5GameStartingAt: 0.
	self assert: (game playerIsAt: 0@0).! !
!XXTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:21:08'!
create5x5GameStartingAt: aColumnNumber! !

!methodRemoval: XXTest #create5x5Game: stamp: 'Matias Cra 11/30/2023 17:21:08'!
create5x5Game: aColumnNumber!

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 17:21:45'!
Object subclass: #MineFieldGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!XXTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:21:42' prior: 50653316!
create5x5GameStartingAt: aColumnNumber
	
	^ MineFieldGame startingAt: aColumnNumber.! !

!classRenamed: #XXTest as: #MineFieldTest stamp: 'Matias Cra 11/30/2023 17:21:55'!
Smalltalk renameClassNamed: #XXTest as: #MineFieldTest!
!MineFieldGame class methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 17:22:14'!
startingAt: aColumnNumber

	^ self new! !
!MineFieldGame methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 17:22:31'!
playerIsAt: aPosition

	^ true! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:23:49'!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game := self create5x5GameStartingAt: 2.
	self assert: (game playerIsAt: 0@2).
	
	game := self create5x5GameStartingAt: 5.
	self assert: (game playerIsAt: 0@5).
	
	self deny: (game playerIsAt: 0@0).! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:24:05' prior: 50653342!
startingAt: aColumnNumber

	^ self new initializeAt: aColumnNumber! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 17:24:34'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 17:24:33'!
initializeAt: aColumnNumber

	column := aColumnNumber ! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 17:24:46' prior: 50653346!
playerIsAt: aPosition

	^ column = (aPosition second)! !

!testRun: #MineFieldTest #test01PlayerCanStartAt0x0 stamp: 'Matias Cra 11/30/2023 17:24:48'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:24:48'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt0x0 stamp: 'Matias Cra 11/30/2023 17:24:51'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt0x0 stamp: 'Matias Cra 11/30/2023 17:24:51'!
ERROR!

aPosition second!

aPosition y!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 17:25:12' prior: 50653380!
playerIsAt: aPosition

	^ column = (aPosition y)! !

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:25:15'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt0x0 stamp: 'Matias Cra 11/30/2023 17:25:16'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:25:18'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:27:45'!
test03PlayerCannotStartOutsideTheField
	| game |
	
	self should: [ game := self create5x5GameStartingAt: -1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:28:21'!
startingAt

	| game |
	
	self should: [ game := self create5x5GameStartingAt: -1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:28:21' prior: 50653414!
test03PlayerCannotStartOutsideTheField
	self startingAt! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:28:27' prior: 50653427!
startingAt
	| game |
	
	self should: [ game := self create5x5GameStartingAt: -1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:28:52'!
aStartingPosition

	^ -1! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:28:52' prior: 50653444!
startingAt
	| game |
	
	self should: [ game := self create5x5GameStartingAt: self aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !

!methodRemoval: MineFieldTest #aStartingPosition stamp: 'Matias Cra 11/30/2023 17:29:01'!
aStartingPosition

	^ -1!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:29:01' prior: 50653460!
startingAt
	| game |
	
	self should: [ game := self create5x5GameStartingAt:  -1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:29:14' prior: 50653477!
startingAt
	| game |
	
	self should: [ | aStartingPosition |
	aStartingPosition := -1.
	game := self create5x5GameStartingAt:  aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:29:35' prior: 50653489!
startingAt
	| game aStartingPosition |
	aStartingPosition := -1.	
	self should: [
	game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:29:46' prior: 50653503!
startingAt
	| game aStartingPosition |
	aStartingPosition := -1.	
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:30:42'!
startingAt: startingPosition
	| game aStartingPosition |
	aStartingPosition := -1.	
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:30:42' prior: 50653439!
test03PlayerCannotStartOutsideTheField
	self startingAt: -1! !

!methodRemoval: MineFieldTest #startingAt stamp: 'Matias Cra 11/30/2023 17:30:42'!
startingAt
	| game aStartingPosition |
	aStartingPosition := -1.	
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:30:57' prior: 50653531!
startingAt: aStartingPosition
	| game |
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:31:17'!
shouldFailStartingAt: aStartingPosition
	| game |
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:31:25' prior: 50653578!
shouldFailStartingAt: aStartingPosition

	| game |
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:31:28' prior: 50653592!
shouldFailStartingAt: aStartingPosition
	| game |

	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !

!methodRemoval: MineFieldTest #startingAt: stamp: 'Matias Cra 11/30/2023 17:31:36'!
startingAt: aStartingPosition
	| game |
	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:31:55' prior: 50653546!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1.
! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:32:30' prior: 50653632!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1.
	self shouldFailStartingAt: 6.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:33:25'!
shouldFailStartingAt: aStartingPosition inAFieldOfSize: aFieldSize 
	| game |

	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:33:25' prior: 50653638!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inAFieldOfSize: 5.
	self shouldFailStartingAt: 6 inAFieldOfSize: 5.! !

!methodRemoval: MineFieldTest #shouldFailStartingAt: stamp: 'Matias Cra 11/30/2023 17:33:25'!
shouldFailStartingAt: aStartingPosition
	| game |

	self should: [ game := self create5x5GameStartingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:33:40' prior: 50653644!
shouldFailStartingAt: aStartingPosition inAFieldOfSize: aFieldSize 
	| game |

	self should: [ game := self createFieldOfSize: aFieldSize startingAt: aStartingPosition ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:33:55'!
createFieldOfSize: aFieldSize startingAt: aStartingPosition
	
	^ MineFieldGame startingAt: aStartingPosition.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:34:04' prior: 50653680!
shouldFailStartingAt: aStartingColumn inAFieldOfSize: aFieldSize 
	| game |

	self should: [ game := self createFieldOfSize: aFieldSize startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:34:17' prior: 50653695!
createFieldOfSize: aFieldSize startingAt: aStartingColumn
	
	^ MineFieldGame startingAt: aStartingColumn.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:34:45' prior: 50653332!
create5x5GameStartingAt: aColumnNumber
	
	^ self createFieldOfSize: 5 startingAt: aColumnNumber! !

!methodRemoval: MineFieldTest #create5x5GameStartingAt: stamp: 'Matias Cra 11/30/2023 17:34:52'!
create5x5GameStartingAt: aColumnNumber
	
	^ self createFieldOfSize: 5 startingAt: aColumnNumber!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:34:52' prior: 50653310!
test01PlayerCanStartAt0x0
	| game |
	game :=  self createFieldOfSize: 5 startingAt: 0.
	self assert: (game playerIsAt: 0@0).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:34:52' prior: 50653350!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createFieldOfSize: 5 startingAt: 2.
	self assert: (game playerIsAt: 0@2).
	
	game :=  self createFieldOfSize: 5 startingAt: 5.
	self assert: (game playerIsAt: 0@5).
	
	self deny: (game playerIsAt: 0@0).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:35:46'!
shouldFailStartingAt: aStartingColumn inField: aFieldSize 
	| game |

	self should: [ game := self createFieldOfSize: aFieldSize startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:35:46' prior: 50653659!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inField: 5.
	self shouldFailStartingAt: 6 inField: 5.! !

!methodRemoval: MineFieldTest #shouldFailStartingAt:inAFieldOfSize: stamp: 'Matias Cra 11/30/2023 17:35:46'!
shouldFailStartingAt: aStartingColumn inAFieldOfSize: aFieldSize 
	| game |

	self should: [ game := self createFieldOfSize: aFieldSize startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:35:58' prior: 50653755!
shouldFailStartingAt: aStartingColumn inField: aField 
	| game |

	self should: [ game := self createFieldOfSize: aField startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:36:18'!
shouldFailStartingAt: aStartingColumn inBoard: aField 
	| game |

	self should: [ game := self createFieldOfSize: aField startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:36:18' prior: 50653770!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inBoard: 5.
	self shouldFailStartingAt: 6 inBoard: 5.! !

!methodRemoval: MineFieldTest #shouldFailStartingAt:inField: stamp: 'Matias Cra 11/30/2023 17:36:18'!
shouldFailStartingAt: aStartingColumn inField: aField 
	| game |

	self should: [ game := self createFieldOfSize: aField startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:36:21' prior: 50653806!
shouldFailStartingAt: aStartingColumn inBoard: aBoard 
	| game |

	self should: [ game := self createFieldOfSize: aBoard startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:36:38'!
createGameWithBoard: aFieldSize startingAt: aStartingColumn
	
	^ MineFieldGame startingAt: aStartingColumn.! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:36:38' prior: 50653737!
test01PlayerCanStartAt0x0
	| game |
	game :=  self createGameWithBoard: 5 startingAt: 0.
	self assert: (game playerIsAt: 0@0).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:36:38' prior: 50653843!
shouldFailStartingAt: aStartingColumn inBoard: aBoard 
	| game |

	self should: [ game := self createGameWithBoard: aBoard startingAt: aStartingColumn ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:36:38' prior: 50653744!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: 5 startingAt: 2.
	self assert: (game playerIsAt: 0@2).
	
	game :=  self createGameWithBoard: 5 startingAt: 5.
	self assert: (game playerIsAt: 0@5).
	
	self deny: (game playerIsAt: 0@0).! !

!methodRemoval: MineFieldTest #createFieldOfSize:startingAt: stamp: 'Matias Cra 11/30/2023 17:36:38'!
createFieldOfSize: aFieldSize startingAt: aStartingColumn
	
	^ MineFieldGame startingAt: aStartingColumn.!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:36:53' prior: 50653864!
test01PlayerCanStartAt0x0
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 0.
	self assert: (game playerIsAt: 0@0).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:37:03' prior: 50653887!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 0@2).
	
	game :=  self createGameWithBoard: 5 startingAt: 5.
	self assert: (game playerIsAt: 0@5).
	
	self deny: (game playerIsAt: 0@0).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:37:09' prior: 50653913!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 0@2).
	
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 0@5).
	
	self deny: (game playerIsAt: 0@0).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:37:21' prior: 50653821!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:37:31' prior: 50653857!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn
	
	^ MineFieldGame startingAt: aStartingColumn.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:37:48'!
fiveByFiveBoard
	^ 'TODO'! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:37:51' prior: 50653955!
fiveByFiveBoard

	^ 'TODO'! !

!testRun: #MineFieldTest #test01PlayerCanStartAt0x0 stamp: 'Matias Cra 11/30/2023 17:37:54'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:37:55'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:37:57'!
FAILURE!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:37:57'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:38:17' prior: 50653939!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:38:34'!
test01PlayerCanStartAt1x1
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 0.
	self assert: (game playerIsAt: 0@0).! !

!methodRemoval: MineFieldTest #test01PlayerCanStartAt0x0 stamp: 'Matias Cra 11/30/2023 17:38:34'!
test01PlayerCanStartAt0x0
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 0.
	self assert: (game playerIsAt: 0@0).!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:38:41' prior: 50653989!
test01PlayerCanStartAt1x1
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 1.
	self assert: (game playerIsAt: 1@1).! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:38:44'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:38:45'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:38:54' prior: 50653926!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 1@5).
	
	self deny: (game playerIsAt: 1@0).! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:39:52'!
invalidStartingPositionErrorDescription

	^ 'Can''t start in desired position, must start at a valid position in the first row of the board'! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:39:59' prior: 50653362!
startingAt: aColumnNumber
	
	^ self new initializeAt: aColumnNumber! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:40:37'!
aBoard: board startingAt: aColumnNumber
	
	^ self new initializeAt: aColumnNumber! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:40:37' prior: 50653948!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn
	
	^ MineFieldGame aBoard: self fiveByFiveBoard startingAt: aStartingColumn.! !

!methodRemoval: MineFieldGame class #startingAt: stamp: 'Matias Cra 11/30/2023 17:40:37'!
startingAt: aColumnNumber
	
	^ self new initializeAt: aColumnNumber!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:40:54' prior: 50654053!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn
	
	^ MineFieldGame aBoard: aMineFieldBoard startingAt: aStartingColumn.! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:43:19'!
board: board startingAt: aColumnNumber
	
	^ self new initializeAt: aColumnNumber! !

!methodRemoval: MineFieldGame class #aBoard:startingAt: stamp: 'Matias Cra 11/30/2023 17:43:19'!
aBoard: board startingAt: aColumnNumber
	
	^ self new initializeAt: aColumnNumber!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:43:49' prior: 50654074!
board: aBoard startingAt: aColumnNumber
	
	^ self new initializeAt: aColumnNumber! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:45:03' prior: 50654086!
board: aBoard startingAt: aColumnNumber
	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeAt: aColumnNumber! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:46:25'!
assertColumn: aColumnNumber inBoard: aBoard

	 (aBoard > aColumnNumber first size) 
		ifTrue: [ self error: self invalidStartingPositionErrorDescription ]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:46:42'!
test04PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:46:53' prior: 50653977!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:46:58' prior: 50654122!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: 0 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.! !

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:47:03'!
ERROR!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:47:03'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:47:15' prior: 50654066!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn
	
	^ MineFieldGame board: aMineFieldBoard startingAt: aStartingColumn.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:47:53' prior: 50653959!
fiveByFiveBoard

	^ {
		{}. 
		{}.
		{}.
		{}.
		{}.
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 17:48:36' prior: 50654155!
fiveByFiveBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:48:46'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:48:46'!
ERROR!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:48:56' prior: 50654101!
assertColumn: aColumnNumber inBoard: aBoard

	 (aBoard > (aColumnNumber first) size) 
		ifTrue: [ self error: self invalidStartingPositionErrorDescription ]! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:48:58'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:48:58'!
ERROR!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 17:49:11' prior: 50654178!
assertColumn: aColumnNumber inBoard: aBoard

	 (aColumnNumber > aBoard first size) 
		ifTrue: [ self error: self invalidStartingPositionErrorDescription ]! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:49:13'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:49:16'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:49:17'!
FAILURE!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:49:17'!
FAILURE!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:49:51'!
FAILURE!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:49:51'!
FAILURE!

----SNAPSHOT----(30 November 2023 17:50:16) CuisUniversity-5981.image priorSource: 10290945!
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 17:51:05' prior: 50654193!
assertColumn: aColumnNumber inBoard: aBoard

	 (0 < aColumnNumber and: [ aColumnNumber <= aBoard first size ])
		ifFalse: [ self error: self invalidStartingPositionErrorDescription ]! !
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 17:52:09'!
numberOfColumns: aBoard

	^ aBoard first size! !
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 17:52:09' prior: 50654226!
assertColumn: aColumnNumber inBoard: aBoard

	 (0 < aColumnNumber and: [ aColumnNumber <= (self numberOfColumns: aBoard) ])
		ifFalse: [ self error: self invalidStartingPositionErrorDescription ]! !

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:52:21'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:52:46'!
test05PlayerMustStartAtAValidColumnNumber
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.! !

!methodRemoval: MineFieldTest #test04PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:52:46'!
test04PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:52:54'!
test04PlayerMustStartAtAValidColumnNumber
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.! !

!methodRemoval: MineFieldTest #test05PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:52:54'!
test05PlayerMustStartAtAValidColumnNumber
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:52:58'!
FAILURE!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:52:58'!
FAILURE!
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 17:53:31' prior: 50654240!
assertColumn: aColumnNumber inBoard: aBoard

	 ((aColumnNumber isKindOf: Integer) and: [ 0 < aColumnNumber ] and: [ aColumnNumber <= (self numberOfColumns: aBoard) ])
		ifFalse: [ self error: self invalidStartingPositionErrorDescription ]! !

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:53:37'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:53:39'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:53:39'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:53:39'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:53:39'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:54:13'!
test05PlayerAlwaysStartsInFirstRow! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:54:37' prior: 50654339!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	self deny: (game playerIsAt: 3@2).! !

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 17:54:38'!
FAILURE!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 17:54:38'!
FAILURE!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 17:54:56' prior: 50653375!
initializeAt: aColumnNumber

	column := 1@aColumnNumber ! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 17:55:01'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:55:01' prior: 50653399!
playerIsAt: aPosition

	^ position = (aPosition y)! !
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 17:55:01' prior: 50654361!
initializeAt: aColumnNumber

	position := 1@aColumnNumber ! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 17:55:11' prior: 50654375!
playerIsAt: aPosition

	^ position = aPosition! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:55:16'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:55:16'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:55:16'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:55:16'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 17:55:16'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:57:21'!
test06CreatedGameHasFiveByFiveBoard
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: game boardDimensions equals: 5@5 ! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:57:23' prior: 50654407!
test06CreatedGameHasFiveByFiveBoard
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: game boardDimensions equals: 5@5. ! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:57:25' prior: 50654416!
test06CreatedGameHasFiveByFiveBoard
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: game boardDimensions equals: 5@5.! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 17:57:58'!
boardDimensions

	^ 5@5! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 17:58:00'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 17:58:00'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 17:58:00'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 17:58:00'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 17:58:00'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 17:58:00'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:58:14'!
test06CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self fiveByFiveBoard startingAt: 2.
	self assert: game boardDimensions equals: 5@5.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:59:37' prior: 50654458!
test06CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self sixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@3.
	self deny: game boardDimensions equals: 5@5.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:59:49' prior: 50654467!
test06CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self sixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@3.
	self deny: (game boardDimensions = 5@5).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 17:59:56'!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self sixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@3.
	self deny: (game boardDimensions = 5@5).! !

!methodRemoval: MineFieldTest #test06CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 17:59:56'!
test06CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self sixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@3.
	self deny: (game boardDimensions = 5@5).!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:00:12'!
sixByFourBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:00:39' prior: 50654507!
sixByFourBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:00:52' prior: 50654518!
sixByFourBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
	}! !

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:01:02'!
FAILURE!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:01:02'!
FAILURE!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:01:52'!
With: board initializeAt: aColumnNumber

	position := 1@aColumnNumber ! !
!MineFieldGame class methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:01:52' prior: 50654093!
board: aBoard startingAt: aColumnNumber
	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new With: aBoard initializeAt: aColumnNumber! !

!methodRemoval: MineFieldGame #initializeAt: stamp: 'Matias Cra 11/30/2023 18:01:52'!
initializeAt: aColumnNumber

	position := 1@aColumnNumber !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:02:09'!
initializeWith: board at: aColumnNumber

	position := 1@aColumnNumber ! !
!MineFieldGame class methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:02:09' prior: 50654551!
board: aBoard startingAt: aColumnNumber
	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeWith: aBoard at: aColumnNumber! !

!methodRemoval: MineFieldGame #With:initializeAt: stamp: 'Matias Cra 11/30/2023 18:02:09'!
With: board initializeAt: aColumnNumber

	position := 1@aColumnNumber !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:02:42'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position boarda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:02:41' prior: 50654563!
initializeWith: aBoard at: aColumnNumber
	
	boarda := aBoard.
	position := 1@aColumnNumber ! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:02:45'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:02:45' prior: 50654591!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber ! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 18:03:15' prior: 50654433!
boardDimensions

	^ board size @ board first size! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 18:03:24'!
numberOfRows

	^ board size! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 18:03:24' prior: 50654612!
boardDimensions

	^ self numberOfRows @ board first size! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 18:03:32'!
numberOfColumns

	^ board first size! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 18:03:32' prior: 50654621!
boardDimensions

	^ self numberOfRows @ self numberOfColumns! !

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:03:47'!
FAILURE!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:03:47'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:03:54' prior: 50654487!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self sixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@4.
	self deny: (game boardDimensions = 5@5).! !

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:03:55'!
ERROR!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:03:55'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:04:05' prior: 50654644!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self sixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@4.
	self deny: (game boardDimensions = (5@5)).! !

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:04:07'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:05:40'!
test99TODO

	'El campo debe ser rectangular y tener elementos validos'! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:06:08' prior: 50654278!
test04PlayerMustStartAtAValidColumnNumber
	
	self shouldFailStartingAt: -1 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self fiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self fiveByFiveBoard.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:06:10'!
PASSED!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:08:44'!
emptyFiveByFiveBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50654680!
test04PlayerMustStartAtAValidColumnNumber
	
	self shouldFailStartingAt: -1 inBoard: self emptyFiveByFiveBoard.
	self shouldFailStartingAt: 1.2 inBoard: self emptyFiveByFiveBoard.
	self shouldFailStartingAt: 'a' inBoard: self emptyFiveByFiveBoard.! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50654020!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 1@5).
	
	self deny: (game playerIsAt: 1@0).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50654005!
test01PlayerCanStartAt1x1
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50654344!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	self deny: (game playerIsAt: 3@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50654425!
test06CreatedGameHasFiveByFiveBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: game boardDimensions equals: 5@5.! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50654131!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: 0 inBoard: self emptyFiveByFiveBoard.
	self shouldFailStartingAt: 6 inBoard: self emptyFiveByFiveBoard.! !

!methodRemoval: MineFieldTest #fiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:08:44'!
fiveByFiveBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:08:51'!
emptySixByFourBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
	}! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:08:51' prior: 50654661!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self emptySixByFourBoard startingAt: 2.
	self assert: game boardDimensions equals: 6@4.
	self deny: (game boardDimensions = (5@5)).! !

!methodRemoval: MineFieldTest #sixByFourBoard stamp: 'Matias Cra 11/30/2023 18:08:51'!
sixByFourBoard

	^ {
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
	}!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:09:28' prior: 50654674!
test99TODO

	"El campo debe ser rectangular y tener elementos validos"! !

----SNAPSHOT----(30 November 2023 18:09:32) CuisUniversity-5981.image priorSource: 10322278!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:09:51'!
test08PlayerCanMoveUp
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:10:04' prior: 50654844!
test08PlayerCanMoveUp
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveUp.
	self assert: (game playerIsAt: 1@2).! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:10:42'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board moved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:10:41'!
moveUp

	moved = true! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:10:52' prior: 50654606!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber.
	moved = false.! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:11:13' prior: 50654385!
playerIsAt: aPosition
	
	moved ifTrue: [ ^ position + 0@1 ]
	^ position = aPosition! !

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:11:33'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:11:33'!
ERROR!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:11:38' prior: 50654880!
playerIsAt: aPosition
	
	moved ifTrue: [ ^ position + 0@1 ].
	^ position = aPosition! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:11:41'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:11:41'!
ERROR!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:11:41'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:11:41'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:11:41'!
ERROR!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:11:41'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:11:41'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:11:41'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:11:41'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:11:45'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:11:45'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:12:04'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:12:04'!
ERROR!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:12:29' prior: 50654873!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber.
	moved := false.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:12:33'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:12:33'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:12:33'!
FAILURE!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:12:35'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:12:36'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:12:39'!
FAILURE!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:12:39'!
FAILURE!

game!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:12:58' prior: 50654869!
moveUp

	moved := true! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:13:00'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:13:00'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:13:00'!
ERROR!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:13:14' prior: 50654892!
playerIsAt: aPosition
	
	moved ifTrue: [ ^ position + (0@1) ].
	^ position = aPosition! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:13:17'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:13:17'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:13:17'!
ERROR!

game!

game playerIsAt: 1@2!

game playerIsAt: 1@2!

game playerIsAt: 1@2!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:14:09' prior: 50655033!
playerIsAt: aPosition
	
	moved ifTrue: [ ^ aPosition = (position + (0@1)) ].
	^ position = aPosition! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:14:10'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:14:11'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:14:48'!
test08PlayerCanMoveRight
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveUp.
	self assert: (game playerIsAt: 2@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:14:52'!
test09PlayerCanMoveRight
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveUp.
	self assert: (game playerIsAt: 2@1).! !

!methodRemoval: MineFieldTest #test08PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:14:52'!
test08PlayerCanMoveRight
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveUp.
	self assert: (game playerIsAt: 2@1).!

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:15:01'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board movedup'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:15:01' prior: 50655075!
playerIsAt: aPosition
	
	movedup ifTrue: [ ^ aPosition = (position + (0@1)) ].
	^ position = aPosition! !
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:15:01' prior: 50654941!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber.
	movedup := false.! !
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:15:01' prior: 50654995!
moveUp

	movedup := true! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:15:06'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board movedUp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:15:06' prior: 50655146!
playerIsAt: aPosition
	
	movedUp ifTrue: [ ^ aPosition = (position + (0@1)) ].
	^ position = aPosition! !
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:15:06' prior: 50655153!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber.
	movedUp := false.! !
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:15:06' prior: 50655160!
moveUp

	movedUp := true! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:15:21'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board movedUp movedRight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:15:20' prior: 50655180!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber.
	movedUp := false.
	movedRight := false.! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:15:41' prior: 50655173!
playerIsAt: aPosition
	
	movedUp ifTrue: [ ^ aPosition = (position + (0@1)) ].
	movedRight ifTrue: [ ^ aPosition = (position + (1@0)) ].
	^ position = aPosition! !

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:15:43'!
FAILURE!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:15:43'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:15:57' prior: 50655120!
test09PlayerCanMoveRight
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveRight.
	self assert: (game playerIsAt: 2@1).! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:16:07'!
moveRight

	movedRight := true! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:16:10'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:16:17'!
test09PlayerCanMoveDown
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveRight.
	self assert: (game playerIsAt: 2@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:16:39' prior: 50655269!
test09PlayerCanMoveDown
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveDown.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:16:45'!
test10PlayerCanMoveDown
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveDown.
	self assert: (game playerIsAt: 1@1).! !

!methodRemoval: MineFieldTest #test09PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:16:45'!
test09PlayerCanMoveDown
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveDown.
	self assert: (game playerIsAt: 1@1).!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:16:47'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:16:47'!
ERROR!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:16:54'!
moveDown
! !

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:16:58'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:17:19'!
test10PlayerCanMoveLeft
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:17:25'!
moveLeft
! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:17:32'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board movedUp movedRight moved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:17:31' prior: 50655323!
moveLeft

	moved := #left
! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:17:42' prior: 50655231!
moveRight

	moved:=#right! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:17:49' prior: 50655340!
moveRight

	moved:= #right! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:17:51' prior: 50655344!
moveRight

	moved := #right! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:17:57' prior: 50655187!
moveUp

	moved := #up! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:18:11' prior: 50655200!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := 1@aColumnNumber.
	moved := false! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:18:34' prior: 50655208!
playerIsAt: aPosition
	
	moved = #up ifTrue: [ ^ aPosition = (position + (0@1)) ].
	moved = #right ifTrue: [ ^ aPosition = (position + (1@0)) ].
	moved = #left ifTrue: [ ^ aPosition = (position - (1@0)) ].
	^ position = aPosition! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:18:42'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board movedRight moved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:18:42'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board moved'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:18:46'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:18:46'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:18:46'!
FAILURE!

!testRun: #MineFieldTest #test10PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:18:53'!
FAILURE!

!testRun: #MineFieldTest #test10PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:18:53'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:19:28'!
test11PlayerCanMoveLeft
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).! !

!methodRemoval: MineFieldTest #test10PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:19:28'!
test10PlayerCanMoveLeft
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:19:30'!
FAILURE!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:19:30'!
FAILURE!

game!

game!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:20:12' prior: 50654742!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 2@1).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 5@1).
	
	self deny: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:20:30' prior: 50654765!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 2@1).
	self deny: (game playerIsAt: 2@3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50655464!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 1@5).
	
	self deny: (game playerIsAt: 1@0).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:21:09' prior: 50655487!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 1@5).
	
	self deny: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:08:44' prior: 50655477!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 1@2).
	self deny: (game playerIsAt: 3@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:23:08' prior: 50655500!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 2@1).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	self assert: (game playerIsAt: 5@1).
	
	self deny: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:23:29' prior: 50655513!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	self assert: (game playerIsAt: 2@1).
	self deny: (game playerIsAt: 2@3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:23:42' prior: 50654852!
test08PlayerCanMoveUp
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveUp.
	self assert: (game playerIsAt: 1@2).! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:24:09' prior: 50655356!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:25:01'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:25:03'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:25:12'!
test11PlayerCanMoveMultipleTimes
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:25:19'!
test12PlayerCanMoveMultipleTimes
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).! !

!methodRemoval: MineFieldTest #test11PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:25:19'!
test11PlayerCanMoveMultipleTimes
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:26:28' prior: 50655612!
test12PlayerCanMoveMultipleTimes
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1.
	game moveUp; moveRight.
	self assert: (game playerIsAt: (2@2)).
	game moveRight; moveRight; moveDown; moveLeft.
	self assert: (game playerIsAt: (3@1)).! !

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:26:31'!
FAILURE!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:26:31'!
FAILURE!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:26:44' prior: 50655363!
playerIsAt: aPosition

	^ position = aPosition! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:27:01' prior: 50655348!
moveRight

	position := position + 0@1! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:27:11' prior: 50655654!
moveRight

	position := position + 1@0! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:27:31' prior: 50655352!
moveUp

	position := position + 0@1! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:27:33' prior: 50655664!
moveUp

	position := position + (0@1)! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:27:37' prior: 50655659!
moveRight

	position := position + (1@0)! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:27:52' prior: 50655336!
moveLeft

	position := position - (1@0)! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:28:59' prior: 50655309!
moveDown

	position := position - (0@1)! !

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:29:01'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:29:05'!
FAILURE!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:29:05'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:29:05'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:29:43' prior: 50655684!
moveDown
	
	position y > 0 ifTrue: [
		position := position - (0@1)
	]! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:29:46'!
FAILURE!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:29:46'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:29:46'!
FAILURE!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:29:53'!
FAILURE!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:29:53'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:29:53'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:30:01' prior: 50655739!
moveDown
	
	position y > 1 ifTrue: [
		position := position - (0@1)
	]! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:30:04'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:33:15'!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft; moveLeft.
	self assert: (game playerIsAt: (1@1)).
	game moveUp; moveUp; moveUp; moveUp; moveUp.
	self assert: (game playerIsAt: (1@5)).
	5 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@5)).
	5 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:33:28' prior: 50655886!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2.
	game moveLeft; moveLeft.
	self assert: (game playerIsAt: (1@1)).
	5 timesRepeat: [ game moveUp ].
	self assert: (game playerIsAt: (1@5)).
	5 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@5)).
	5 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:33:45' prior: 50655903!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	5 timesRepeat: [ game moveLeft ].
	self assert: (game playerIsAt: (1@1)).
	5 timesRepeat: [ game moveUp ].
	self assert: (game playerIsAt: (1@5)).
	5 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@5)).
	5 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:33:55' prior: 50655919!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	10 timesRepeat: [ game moveLeft ].
	self assert: (game playerIsAt: (1@1)).
	10 timesRepeat: [ game moveUp ].
	self assert: (game playerIsAt: (1@5)).
	10 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@5)).
	10 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).! !

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:34:01'!
FAILURE!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:34:01'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:34:39' prior: 50655679!
moveLeft
	
	position x > 1 ifTrue: [
		position := position - (1@0)
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:35:01' prior: 50655674!
moveRight
	
	position x < self numberOfColumns ifTrue: [
		position := position + (1@0)
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 18:35:29' prior: 50655669!
moveUp
	
	position y < self numberOfRows ifTrue: [
		position := position + (0@1)
	]! !

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:35:33'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:35:34'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:38:55' prior: 50655936!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5.
	10 timesRepeat: [ game moveLeft ].
	self assert: (game playerIsAt: (1@1)).
	10 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@1)).
	10 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).
	10 timesRepeat: [ game moveUp ].
	self assert: (game playerIsAt: (5@5)).! !

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:38:56'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:39:28'!
test14PlayerCanStartWith3Lives! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:39:56'!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn lives: lives 
	
	^ MineFieldGame board: aMineFieldBoard startingAt: aStartingColumn.! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655286!
test10PlayerCanMoveDown
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	game moveDown.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655546!
test08PlayerCanMoveUp
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	game moveUp.
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50654756!
test01PlayerCanStartAt1x1
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655223!
test09PlayerCanMoveRight
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	game moveRight.
	self assert: (game playerIsAt: 2@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655536!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2 lives: 3.
	self assert: (game playerIsAt: 2@1).
	self deny: (game playerIsAt: 2@3).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50654775!
test06CreatedGameHasFiveByFiveBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2 lives: 3.
	self assert: game boardDimensions equals: 5@5.! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50656028!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5 lives: 3.
	10 timesRepeat: [ game moveLeft ].
	self assert: (game playerIsAt: (1@1)).
	10 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@1)).
	10 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).
	10 timesRepeat: [ game moveUp ].
	self assert: (game playerIsAt: (5@5)).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655630!
test12PlayerCanMoveMultipleTimes
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	game moveUp; moveRight.
	self assert: (game playerIsAt: (2@2)).
	game moveRight; moveRight; moveDown; moveLeft.
	self assert: (game playerIsAt: (3@1)).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655440!
test11PlayerCanMoveLeft
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2 lives: 3.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50655523!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 2 lives: 3.
	self assert: (game playerIsAt: 2@1).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 5 lives: 3.
	self assert: (game playerIsAt: 5@1).
	
	self deny: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50654815!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: self emptySixByFourBoard startingAt: 2 lives: 3.
	self assert: game boardDimensions equals: 6@4.
	self deny: (game boardDimensions = (5@5)).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:39:56' prior: 50653872!
shouldFailStartingAt: aStartingColumn inBoard: aBoard 
	| game |

	self should: [ game := self createGameWithBoard: aBoard startingAt: aStartingColumn lives: 3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]! !

!methodRemoval: MineFieldTest #createGameWithBoard:startingAt: stamp: 'Matias Cra 11/30/2023 18:39:56'!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn
	
	^ MineFieldGame board: aMineFieldBoard startingAt: aStartingColumn.!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 18:40:03' prior: 50656052!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn lives: startingLives 
	
	^ MineFieldGame board: aMineFieldBoard startingAt: aStartingColumn.! !

----SNAPSHOT----(30 November 2023 18:40:27) CuisUniversity-5981.image priorSource: 10342089!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 18:42:02'!
board: aBoard startingAt: aColumnNumber lives: lives 
	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeWith: aBoard at: aColumnNumber! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:42:02' prior: 50656204!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn lives: startingLives 
	
	^ MineFieldGame board: aMineFieldBoard startingAt: aStartingColumn lives: startingLives.! !

!methodRemoval: MineFieldGame class #board:startingAt: stamp: 'Matias Cra 11/30/2023 18:42:02'!
board: aBoard startingAt: aColumnNumber
	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeWith: aBoard at: aColumnNumber!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 18:42:12' prior: 50656215!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives 
	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeWith: aBoard at: aColumnNumber! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 18:42:16' prior: 50656241!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives 

	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeWith: aBoard at: aColumnNumber! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:42:35'!
initializeWith: aBoard at: aColumnNumber lives: lives 
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false! !
!MineFieldGame class methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 18:42:35' prior: 50656250!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives 

	self assertColumn: aColumnNumber inBoard: aBoard.	
	^ self new initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives! !

!methodRemoval: MineFieldGame #initializeWith:at: stamp: 'Matias Cra 11/30/2023 18:42:35'!
initializeWith: aBoard at: aColumnNumber
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:42:51' prior: 50656259!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives 
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false.! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:43:22'!
remainingLivesAre: anAmountOfRemainingLives

	^ anAmountOfRemainingLives.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:43:41' prior: 50656048!
test14PlayerCanStartWith3Lives

	! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:43:49'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:44:06' prior: 50656296!
test14PlayerCanStartWith3Lives
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:44:24' prior: 50656351!
test14PlayerCanStartWith3Lives
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:44:36' prior: 50656358!
test14PlayerCanStartWith3Lives
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 3.
	self assert: (game remainingLivesAre: 3).
	self deny: (game remainingLivesAre: 2).
	self deny: (game remainingLivesAre: 4).! !

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:44:50'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:44:50'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:44:51'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:44:51'!
ERROR!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:44:58' prior: 50656290!
remainingLivesAre: anAmountOfRemainingLives

	^ anAmountOfRemainingLives = 3.! !

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:45:01'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:45:29'!
test14PlayerCanStartWithConfiguredLives
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 1.
	self assert: (game remainingLivesAre: 1).
	self deny: (game remainingLivesAre: 3).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 10.
	self assert: (game remainingLivesAre: 10).
	self deny: (game remainingLivesAre: 1).
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:45:33'!
test15PlayerCanStartWithConfiguredLives
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 1.
	self assert: (game remainingLivesAre: 1).
	self deny: (game remainingLivesAre: 3).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 10.
	self assert: (game remainingLivesAre: 10).
	self deny: (game remainingLivesAre: 1).
	! !

!methodRemoval: MineFieldTest #test14PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 18:45:33'!
test14PlayerCanStartWithConfiguredLives
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 1.
	self assert: (game remainingLivesAre: 1).
	self deny: (game remainingLivesAre: 3).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 10.
	self assert: (game remainingLivesAre: 10).
	self deny: (game remainingLivesAre: 1).
	!

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 18:45:50'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board moved lives'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 18:45:49' prior: 50656283!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives 
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false.
	lives := anAmountOfLives.! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:45:56' prior: 50656392!
remainingLivesAre: anAmountOfLives

	^ anAmountOfLives = 3.! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 18:46:00' prior: 50656465!
remainingLivesAre: anAmountOfLives

	^ anAmountOfLives = lives.! !

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 18:46:05'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:46:30'!
test16StartingLivesMustBePositive
	| game |
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 1.
	self assert: (game remainingLivesAre: 1).
	self deny: (game remainingLivesAre: 3).
	
	game :=  self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: 10.
	self assert: (game remainingLivesAre: 10).
	self deny: (game remainingLivesAre: 1).
	! !
!MineFieldTest methodsFor: 'assertions' stamp: 'Matias Cra 11/30/2023 18:47:50'!
shouldFailStartingWith: anAmountOfLives startingAt: aStartingColumn inBoard: aBoard
	| game |

	self should: [ game := self createGameWithBoard: aBoard startingAt: aStartingColumn lives: anAmountOfLives ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidLivesAmountErrorDescrition.
		]! !
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 18:48:17'!
invalidLivesAmountErrorDescrition

	^ 'Amount of starting lives must be a positive integer'! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:48:54' prior: 50656479!
test16StartingLivesMustBePositive
	| game |
	
	self shouldFailStartingWith: -1 startingAt: 1 inBoard: self emptyFiveByFiveBoard.
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:49:03' prior: 50656516!
test16StartingLivesMustBePositive
	
	
	self shouldFailStartingWith: -1.
	! !
!MineFieldTest methodsFor: 'assertions' stamp: 'Matias Cra 11/30/2023 18:49:28'!
shouldFailStartingWith: anAmountOfLives
	| game |

	self should: [ game := self createGameWithBoard: self emptyFiveByFiveBoard startingAt: 1 lives: anAmountOfLives ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidLivesAmountErrorDescrition.
		]! !

!methodRemoval: MineFieldTest #shouldFailStartingAt:inBoard: stamp: 'Matias Cra 11/30/2023 18:49:35'!
shouldFailStartingAt: aStartingColumn inBoard: aBoard 
	| game |

	self should: [ game := self createGameWithBoard: aBoard startingAt: aStartingColumn lives: 3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription.
		]!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:49:46' prior: 50656524!
test16StartingLivesMustBePositive
	
	self shouldFailStartingWith: -1.
	self shouldFailStartingWith: -10.! !

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 18:49:48'!
FAILURE!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 18:49:48'!
FAILURE!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 18:50:02' prior: 50656267!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives 

	self assertColumn: aColumnNumber inBoard: aBoard.	
	self assertPositiveLives: anAmountOfLives.
	^ self new initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives! !
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 18:50:38'!
assertPositiveLives: anAmountOfLives

	 (anAmountOfLives > 0)
		ifFalse: [ self error: self invalidLivesAmountErrorDescrition ]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:50:45' prior: 50656558!
test16StartingLivesMustBePositive
	
	self shouldFailStartingWith: 0.
	self shouldFailStartingWith: -10.! !

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 18:50:46'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 18:53:03'!
test17StartingLivesMustIntegers
	
	self shouldFailStartingWith: 'a'.
	self shouldFailStartingWith: 1.2.! !

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 18:53:05'!
FAILURE!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 18:53:05'!
FAILURE!
!MineFieldGame class methodsFor: 'error assertion' stamp: 'Matias Cra 11/30/2023 18:53:26' prior: 50656583!
assertPositiveLives: anAmountOfLives

	 ((anAmountOfLives isKindOf: Integer) and: [ anAmountOfLives > 0 ])
		ifFalse: [ self error: self invalidLivesAmountErrorDescrition ]! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:53:30'!
ERROR!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:53:30'!
ERROR!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:53:30'!
PASSED!
!MineFieldTest methodsFor: 'assertions' stamp: 'Matias Cra 11/30/2023 18:53:54'!
shouldFailStartingAt: aStartingColumn inBoard: aBoard
	| game |

	self should: [ game := self createGameWithBoard: aBoard startingAt: aStartingColumn lives: 3 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidStartingPositionErrorDescription .
		]! !

!methodRemoval: MineFieldTest #shouldFailStartingWith:startingAt:inBoard: stamp: 'Matias Cra 11/30/2023 18:53:57'!
shouldFailStartingWith: anAmountOfLives startingAt: aStartingColumn inBoard: aBoard
	| game |

	self should: [ game := self createGameWithBoard: aBoard startingAt: aStartingColumn lives: anAmountOfLives ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidLivesAmountErrorDescrition.
		]!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 18:54:00'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:01:00'!
test18LowPotencyMineTakesALife! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:02:09' prior: 50656774!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: self boradWithMineAt1x2 
				startingAt: 1
				lives: 3.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:02:32' prior: 50656778!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: self boradWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:02:55'!
boardWithMineAt1x2! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:03:22' prior: 50656795!
boardWithMineAt1x2
	| board |
	
	board := self emptyFiveByFiveBoard.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:04:29' prior: 50656799!
boardWithMineAt1x2
	| board |
	
	board := self emptyFiveByFiveBoard.
	(board at: 2) at: 1 put: #lowPotencyMine! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:04:32' prior: 50656805!
boardWithMineAt1x2
	| board |
	
	board := self emptyFiveByFiveBoard.
	(board at: 2) at: 1 put: #lowPotencyMine.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:04:35' prior: 50656812!
boardWithMineAt1x2
	| board |
	
	board := self emptyFiveByFiveBoard.
	(board at: 2) at: 1 put: #lowPotencyMine.
	^ board! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:04:57' prior: 50656786!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: self boardWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:05:14' prior: 50656826!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: self boardWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:05:16'!
FAILURE!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:05:16'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:07:23' prior: 50655972!
moveUp
	
	position y < self numberOfRows ifTrue: [
		position := position + (0@1).
		((board at: position y) at: position x) = #lowPotencyMine ifTrue: [].
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:07:44'!
elementAtCurrentPosition

	^ (board at: position y) at: position x! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:07:44' prior: 50656853!
moveUp
	
	position y < self numberOfRows ifTrue: [
		position := position + (0@1).
		(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [].
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:08:38' prior: 50656867!
moveUp
	
	position y < self numberOfRows ifTrue: [
		position := position + (0@1).
		(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
			lives := lives - 1.
		].
	]! !

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:08:46'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:09:02'!
test19LowPotencyMineTakesALifeMovingFromAnywhere
	| game |
	game :=  self createGameWithBoard: self boardWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:09:15' prior: 50656887!
test19LowPotencyMineTakesALifeMovingFromAnywhere
	| game |
	game :=  self createGameWithBoard: self boardWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:09:17'!
FAILURE!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:09:17'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:09:34'!
triggerCurrentPositionEffect

	^ (self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
			lives := lives - 1.
		]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:09:34' prior: 50656875!
moveUp
	
	position y < self numberOfRows ifTrue: [
		position := position + (0@1).
		self triggerCurrentPositionEffect.
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:09:44' prior: 50655966!
moveRight
	
	position x < self numberOfColumns ifTrue: [
		position := position + (1@0).
		self triggerCurrentPositionEffect.
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:09:59'!
moveTo

	position := position + (0@1).
		self triggerCurrentPositionEffect! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:09:59' prior: 50656924!
moveUp
	
	position y < self numberOfRows ifTrue: [
		self moveTo.
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:10:41'!
moveTo: newPosition

	position := position + (0@1).
		self triggerCurrentPositionEffect! !
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 19:10:41' prior: 50656944!
moveUp
	
	position y < self numberOfRows ifTrue: [
		self moveTo: 0@1.
	]! !

!methodRemoval: MineFieldGame #moveTo stamp: 'Matias Cra 11/30/2023 19:10:41'!
moveTo

	position := position + (0@1).
		self triggerCurrentPositionEffect!
!MineFieldGame methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 19:10:41' prior: 50656949!
moveTo: newPosition

	position := position + newPosition.
		self triggerCurrentPositionEffect! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:10:47' prior: 50656967!
moveTo: newPosition

	position := newPosition.
	self triggerCurrentPositionEffect! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:10:48' prior: 50656973!
moveTo: newPosition

	position := newPosition.
	self triggerCurrentPositionEffect.! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:10:58' prior: 50656956!
moveUp
	
	position y < self numberOfRows ifTrue: [
		self moveTo: position + (0@1).
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:11:15' prior: 50656931!
moveRight
	
	position x < self numberOfColumns ifTrue: [
		self moveTo: position + (1@0).
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:11:28' prior: 50655960!
moveLeft
	
	position x > 1 ifTrue: [
		self moveTo: position - (1@0)
	]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:11:35' prior: 50655838!
moveDown
	
	position y > 1 ifTrue: [
		self moveTo: position - (0@1)
	]! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:11:50'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:13:40'!
test20LowPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: self boardWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:14:04' prior: 50657076!
test20LowPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: self boardWithMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 2).! !

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:14:07'!
FAILURE!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:14:07'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:14:25' prior: 50656917!
triggerCurrentPositionEffect

	^ (self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
			lives := lives - 1.
		]! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:15:10' prior: 50657109!
triggerCurrentPositionEffect

	^ (self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
			lives := lives - 1.
			(self at: position y) at: position x put: #Empty
		]! !

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:15:15'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:15:15'!
ERROR!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:15:24' prior: 50657116!
triggerCurrentPositionEffect

	^ (self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
			lives := lives - 1.
			(board at: position y) at: position x put: #Empty
		]! !

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:15:26'!
PASSED!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:16:18'!
emptyRow

	^ {'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:16:18' prior: 50654718!
emptyFiveByFiveBoard

	^ {
		self emptyRow. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:16:18' prior: 50657149!
emptyFiveByFiveBoard

	^ {
		self emptyRow. 
		self emptyRow. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:16:18' prior: 50657160!
emptyFiveByFiveBoard

	^ {
		self emptyRow. 
		self emptyRow. 
		self emptyRow. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:16:18' prior: 50657170!
emptyFiveByFiveBoard

	^ {
		self emptyRow. 
		self emptyRow. 
		self emptyRow. 
		self emptyRow. 
		{'TODO'. 'TODO'. 'TODO'. 'TODO'. 'TODO'}. 
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:16:18' prior: 50657179!
emptyFiveByFiveBoard

	^ {
		self emptyRow. 
		self emptyRow. 
		self emptyRow. 
		self emptyRow. 
		self emptyRow. 
	}! !

(1 to: 5) collect: [:e|e+1]!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:18:24' prior: 50657144!
emptyRow

	^ ((1 to: 5) collect: [ :number | #empty ]) asArray! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:18:47'!
emptyRow: size

	^ ((1 to: 5) collect: [ :number | #empty ]) asArray! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 19:18:47' prior: 50657187!
emptyFiveByFiveBoard

	^ {
		self emptyRow: 5. 
		self emptyRow: 5. 
		self emptyRow: 5. 
		self emptyRow: 5. 
		self emptyRow: 5. 
	}! !

!methodRemoval: MineFieldTest #emptyRow stamp: 'Matias Cra 11/30/2023 19:18:47'!
emptyRow

	^ ((1 to: 5) collect: [ :number | #empty ]) asArray!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:18:52' prior: 50657200!
emptyRow: rowSize

	^ ((1 to: 5) collect: [ :number | #empty ]) asArray! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:18:58' prior: 50657218!
emptyRow: rowSize

	^ ((1 to: rowSize) collect: [ :number | #empty ]) asArray! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:19:29' prior: 50654803!
emptySixByFourBoard

	^ {
		self emptyRow: 4.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
		{'TODO'. 'TODO'. 'TODO'. 'TODO'.}.
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:20:04' prior: 50657230!
emptySixByFourBoard

	^ {
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
	}! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:20:27'!
PASSED!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:21:06'!
boardWithLowPotencyMineAt1x2
	| board |
	
	board := self emptyFiveByFiveBoard.
	(board at: 2) at: 1 put: #lowPotencyMine.
	^ board! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 19:21:06' prior: 50656836!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: self boardWithLowPotencyMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 19:21:06' prior: 50656898!
test19LowPotencyMineTakesALifeMovingFromAnywhere
	| game |
	game :=  self createGameWithBoard: self boardWithLowPotencyMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 19:21:06' prior: 50657088!
test20LowPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: self boardWithLowPotencyMineAt1x2 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 2).! !

!methodRemoval: MineFieldTest #boardWithMineAt1x2 stamp: 'Matias Cra 11/30/2023 19:21:06'!
boardWithMineAt1x2
	| board |
	
	board := self emptyFiveByFiveBoard.
	(board at: 2) at: 1 put: #lowPotencyMine.
	^ board!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:24:33'!
test21HighPotencyMineTakesTwoLives
	| game |
	game :=  self createGameWithBoard: self boardWithHighPotencyMineAt4x4 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:24:51' prior: 50657372!
test21HighPotencyMineTakesTwoLives
	| game |
	game :=  self createGameWithBoard: self boardWithHighPotencyMineAt4x4 
				startingAt: 4
				lives: 3.
		
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
! !

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:24:55'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:24:55'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:25:24'!
boardWithHighPotencyMineAt4x4
	| board |
	
	board := self emptyTenByTenBoard.
	(board at: 4) at: 4 put: #highPotencyMine.
	^ board! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:25:34'!
emptyTenByTenBoard

	^ {
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
		self emptyRow: 4.
	}! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:26:10' prior: 50657407!
emptyTenByTenBoard

	^ (1 to: 10) select: [ :number | self emptyRow: 10 ].! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:26:36' prior: 50657415!
emptyTenByTenBoard
	| rows cols |
	rows := 10.
	cols := 10.
	^ (1 to: rows) select: [ :number | self emptyRow: cols ].! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:27:11'!
emptyBoardWithOf: cols by: rows

	^ (1 to: rows) select: [ :number | self emptyRow: cols ]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:27:11' prior: 50657421!
emptyTenByTenBoard
	| rows cols |
	rows := 10.
	cols := 10.
	^ self emptyBoardWithOf: cols by: rows.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:27:27' prior: 50657434!
emptyTenByTenBoard
	^ self emptyBoardWithOf: 10 by: 10.! !

!methodRemoval: MineFieldTest #emptyTenByTenBoard stamp: 'Matias Cra 11/30/2023 19:27:34'!
emptyTenByTenBoard
	^ self emptyBoardWithOf: 10 by: 10.!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:27:34' prior: 50657400!
boardWithHighPotencyMineAt4x4
	| board |
	
	board :=  self emptyBoardWithOf: 10 by: 10.
	(board at: 4) at: 4 put: #highPotencyMine.
	^ board! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:28:18' prior: 50657206!
emptyFiveByFiveBoard

	^ self emptyBoardWithOf: 5 by: 5.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:28:27' prior: 50657241!
emptySixByFourBoard

	^ self emptyBoardWithOf: 6 by: 4! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:28:33'!
FAILURE!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:28:33'!
FAILURE!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:28:33'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:28:33'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:28:38'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:28:38'!
ERROR!

self emptyBoardWithOf: 10 by: 10!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:29:10' prior: 50657451!
boardWithHighPotencyMineAt4x4
	| board |
	
	board := self emptyBoardWithOf: 10 by: 10.
	(board at: 4) at: 4 put: #highPotencyMine.
	^ board! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:29:14'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:29:15'!
FAILURE!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:29:15'!
FAILURE!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:29:15'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:29:15'!
PASSED!

!methodRemoval: MineFieldTest #emptyFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:29:37'!
emptyFiveByFiveBoard

	^ self emptyBoardWithOf: 5 by: 5.!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656148!
test11PlayerCanMoveLeft
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 2 lives: 3.
	game moveLeft.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656416!
test15PlayerCanStartWithConfiguredLives
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 1.
	self assert: (game remainingLivesAre: 1).
	self deny: (game remainingLivesAre: 3).
	
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 10.
	self assert: (game remainingLivesAre: 10).
	self deny: (game remainingLivesAre: 1).
	! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656088!
test09PlayerCanMoveRight
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 3.
	game moveRight.
	self assert: (game playerIsAt: 2@1).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50657320!
boardWithLowPotencyMineAt1x2
	| board |
	
	board :=  self emptyBoardWithOf: 5 by: 5.
	(board at: 2) at: 1 put: #lowPotencyMine.
	^ board! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656117!
test13PlayerCannotMoveOutsideOfBoard
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 5 lives: 3.
	10 timesRepeat: [ game moveLeft ].
	self assert: (game playerIsAt: (1@1)).
	10 timesRepeat: [ game moveRight ].
	self assert: (game playerIsAt: (5@1)).
	10 timesRepeat: [ game moveDown ].
	self assert: (game playerIsAt: (5@1)).
	10 timesRepeat: [ game moveUp ].
	self assert: (game playerIsAt: (5@5)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656107!
test06CreatedGameHasFiveByFiveBoard
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 2 lives: 3.
	self assert: game boardDimensions equals: 5@5.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656367!
test14PlayerCanStartWith3Lives
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 3.
	self assert: (game remainingLivesAre: 3).
	self deny: (game remainingLivesAre: 2).
	self deny: (game remainingLivesAre: 4).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656070!
test08PlayerCanMoveUp
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 3.
	game moveUp.
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50654784!
test03PlayerCannotStartOutsideTheField
	
	self shouldFailStartingAt: 0 inBoard: ( self emptyBoardWithOf: 5 by: 5).
	self shouldFailStartingAt: 6 inBoard: ( self emptyBoardWithOf: 5 by: 5).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656061!
test10PlayerCanMoveDown
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 3.
	game moveDown.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656097!
test05PlayerAlwaysStartsInFirstRow
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 2 lives: 3.
	self assert: (game playerIsAt: 2@1).
	self deny: (game playerIsAt: 2@3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656157!
test02PlayerCanStartAnywhereInFirstRow
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 2 lives: 3.
	self assert: (game playerIsAt: 2@1).
	
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 5 lives: 3.
	self assert: (game playerIsAt: 5@1).
	
	self deny: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656079!
test01PlayerCanStartAt1x1
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 3.
	self assert: (game playerIsAt: 1@1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50654730!
test04PlayerMustStartAtAValidColumnNumber
	
	self shouldFailStartingAt: -1 inBoard: ( self emptyBoardWithOf: 5 by: 5).
	self shouldFailStartingAt: 1.2 inBoard: ( self emptyBoardWithOf: 5 by: 5).
	self shouldFailStartingAt: 'a' inBoard: ( self emptyBoardWithOf: 5 by: 5).! !
!MineFieldTest methodsFor: 'assertions' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656529!
shouldFailStartingWith: anAmountOfLives
	| game |

	self should: [ game := self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: anAmountOfLives ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: game isNil.
			self assert: anError messageText equals: MineFieldGame invalidLivesAmountErrorDescrition.
		]! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:37' prior: 50656135!
test12PlayerCanMoveMultipleTimes
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 5 by: 5) startingAt: 1 lives: 3.
	game moveUp; moveRight.
	self assert: (game playerIsAt: (2@2)).
	game moveRight; moveRight; moveDown; moveLeft.
	self assert: (game playerIsAt: (3@1)).! !

!methodRemoval: MineFieldTest #emptySixByFourBoard stamp: 'Matias Cra 11/30/2023 19:29:47'!
emptySixByFourBoard

	^ self emptyBoardWithOf: 6 by: 4!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:29:47' prior: 50656171!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: ( self emptyBoardWithOf: 6 by: 4) startingAt: 2 lives: 3.
	self assert: game boardDimensions equals: 6@4.
	self deny: (game boardDimensions = (5@5)).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:29:58' prior: 50657428!
emptyBoardWithOf: cols by: rows

	^ ((1 to: rows) select: [ :number | self emptyRow: cols ]) asArray! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:30:01'!
FAILURE!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:30:01'!
FAILURE!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:30:01'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:30:01'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:30:04'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:30:04'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:30:06'!
ERROR!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:30:06'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:30:08'!
ERROR!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:30:08'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:30:30' prior: 50657834!
emptyBoardWithOf: cols by: rows

	^ ((1 to: rows) collect: [ :number | self emptyRow: cols ]) asArray! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:30:32'!
FAILURE!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:30:32'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:30:32'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:30:40'!
FAILURE!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:30:40'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:30:47' prior: 50657823!
test07CreatedGameHasConfiguredBoardSize
	| game |
	game :=  self createGameWithBoard: (self emptyBoardWithOf: 6 by: 4) startingAt: 2 lives: 3.
	self assert: game boardDimensions equals: 6@4.
	self deny: (game boardDimensions = (5@5)).! !
!MineFieldGame methodsFor: 'accessing' stamp: 'Matias Cra 11/30/2023 19:31:20' prior: 50654631!
boardDimensions

	^ self numberOfColumns @ self numberOfRows ! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:32:07'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:32:07'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:32:07'!
FAILURE!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:32:09'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:32:09'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:32:09'!
FAILURE!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:32:12'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:32:13'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:32:14'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:32:15'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:32:17'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:32:18'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:32:19'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:32:21'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:32:22'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:32:24'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:32:25'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:32:27'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:32:29'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:32:31'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:32:32'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:32:35'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:32:36'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:32:37'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:32:39'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:32:41'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:32:43'!
FAILURE!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:32:43'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:33:23' prior: 50657132!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty
	].
! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:33:28' prior: 50658273!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty
		^ self.
	].
! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:33:34' prior: 50658287!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 2.
		(board at: position y) at: position x put: #Empty
		^ self.
	].
! !
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:33:48' prior: 50658301!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].

	(self elementAtCurrentPosition) = #highPotencyMine ifTrue: [
		lives := lives - 2.
"		(board at: position y) at: position x put: #Empty"
		^ self.
	].
! !

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:33:54'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:34:22'!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: self boardWithHighPotencyMineAt4x4 
				startingAt: 4
				lives: 3.
		
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:34:32' prior: 50658332!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: self boardWithHighPotencyMineAt4x4 
				startingAt: 4
				lives: 3.
		
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 1).! !

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:34:35'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:36:56'!
PASSED!

game!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:37:33' prior: 50658343!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: self boardWithHighPotencyMineAt4x4 
				startingAt: 4
				lives: 3.
		
	3 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 1).! !

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:37:34'!
FAILURE!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:37:34'!
FAILURE!
!MineFieldGame methodsFor: 'moving' stamp: 'Matias Cra 11/30/2023 19:37:41' prior: 50658315!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].

	(self elementAtCurrentPosition) = #highPotencyMine ifTrue: [
		lives := lives - 2.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].
! !

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:37:45'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:37:47'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:37:50'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:38:14'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:38:16'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:38:17'!
PASSED!

----SNAPSHOT----(30 November 2023 19:38:44) CuisUniversity-5981.image priorSource: 10385952!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:45:41'!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:47:10' prior: 50658422!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board element |
	board := self emptyBoardWithOf: cols by: rows.
	element := #lowPotencyMine.
	lowPotencyMinesLocations do: [ :location | (board at: location y) at: (location x) put: element ]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:47:31'!
inLocation: location ofBoard: board put: element

	^ (board at: location y) at: (location x) put: element! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:47:31' prior: 50658432!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board element |
	board := self emptyBoardWithOf: cols by: rows.
	element := #lowPotencyMine.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: element ]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:47:44' prior: 50658455!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ]! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:48:07' prior: 50658471!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #highPotencyMine ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #highPotencyMine ].! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:48:34' prior: 50658486!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #highPotencyMine ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:48:59' prior: 50658508!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocationsAndPositions
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #highPotencyMine ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #tunel ].! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:49:16' prior: 50658533!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocationsAndPositions
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #highPotencyMine ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	lightArmorsLocations do: [ :tunel | 'TODO' ].! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:49:24' prior: 50658562!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocationsAndPositions
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #highPotencyMine ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	lightArmorsLocations do: [ :tunel | 'TODO' ].
	
	^ board! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:50:04'!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations

	self createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: #() lightArmors: #() heavyArmors: #() tunels: #()! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:50:27'!
createBoardOf: cols by: rows withhighPotencyMinesAt: highPotencyMinesLocations

	self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: highPotencyMinesLocations lightArmors: #() heavyArmors: #() tunels: #()! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:50:38'!
createBoardOf: cols by: rows withHighPotencyMinesAt: highPotencyMinesLocations

	self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: highPotencyMinesLocations lightArmors: #() heavyArmors: #() tunels: #()! !

!methodRemoval: MineFieldTest #createBoardOf:by:withhighPotencyMinesAt: stamp: 'Matias Cra 11/30/2023 19:50:38'!
createBoardOf: cols by: rows withhighPotencyMinesAt: highPotencyMinesLocations

	self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: highPotencyMinesLocations lightArmors: #() heavyArmors: #() tunels: #()!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:51:10' prior: 50657552!
boardWithHighPotencyMineAt4x4
	^ self createBoardOf: 4 by: 4 withHighPotencyMinesAt: #(4@4)! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:13'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:51:13'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:51:13'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:21'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:21'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:24'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:24'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:40'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:51:40'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:51:59' prior: 50658658!
boardWithHighPotencyMineAt4x4
	^ self createBoardOf: 4 by: 4 withHighPotencyMinesAt: #((4@4))! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:52:01'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:52:02'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:52:02'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:52:02'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:52:05'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:52:05'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:52:25' prior: 50658764!
boardWithHighPotencyMineAt4x4
	^ self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:52:27'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:52:28'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:52:28'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:52:28'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:52:31'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:52:31'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:52:54' prior: 50658636!
createBoardOf: cols by: rows withHighPotencyMinesAt: highPotencyMinesLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: highPotencyMinesLocations lightArmors: #() heavyArmors: #() tunels: #()! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:52:57' prior: 50658616!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: #() lightArmors: #() heavyArmors: #() tunels: #()! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:53:01'!
PASSED!

----SNAPSHOT----(30 November 2023 19:53:12) CuisUniversity-5981.image priorSource: 10456585!

!methodRemoval: MineFieldTest #boardWithHighPotencyMineAt4x4 stamp: 'Matias Cra 11/30/2023 19:53:20'!
boardWithHighPotencyMineAt4x4
	^ self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:53:20' prior: 50657383!
test21HighPotencyMineTakesTwoLives
	| game |
	game :=  self createGameWithBoard: ( self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}) 
				startingAt: 4
				lives: 3.
		
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:53:20' prior: 50658364!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: ( self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}) 
				startingAt: 4
				lives: 3.
		
	3 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:53:43' prior: 50659058!
test21HighPotencyMineTakesTwoLives
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}) 
				startingAt: 4
				lives: 3.
		
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:53:48' prior: 50659070!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}) 
				startingAt: 4
				lives: 3.
		
	3 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 1).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 19:54:21' prior: 50657673!
boardWithLowPotencyMineAt1x2
	^ self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:54:23'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:54:24'!
PASSED!

!methodRemoval: MineFieldTest #boardWithLowPotencyMineAt1x2 stamp: 'Matias Cra 11/30/2023 19:54:33'!
boardWithLowPotencyMineAt1x2
	^ self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:54:33' prior: 50657328!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: ( self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}) 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:54:33' prior: 50657339!
test19LowPotencyMineTakesALifeMovingFromAnywhere
	| game |
	game :=  self createGameWithBoard: ( self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}) 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:54:33' prior: 50657352!
test20LowPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: ( self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}) 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:54:51' prior: 50659213!
test19LowPotencyMineTakesALifeMovingFromAnywhere
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}) 
				startingAt: 1
				lives: 3.
		
	game moveRight; moveUp; moveLeft.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:55:00' prior: 50659201!
test18LowPotencyMineTakesALife
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}) 
				startingAt: 1
				lives: 3.
		
	game moveUp.
	self assert: (game remainingLivesAre: 2).
	self assert: (game playerIsAt: 1@2).! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 19:55:02'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:58:03'!
test23HighPotencyMineSendPlayerFlying
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5).}) 
				startingAt: 5
				lives: 3.
		
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	game moveUp; moveDown.
	self assert: (game remainingLivesAre: 1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:58:57' prior: 50659096!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}) 
				startingAt: 4
				lives: 3.
		
	3 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	3 timesRepeat: [ game moveUp; moveLeft ].
	self assert: (game remainingLivesAre: 1).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 19:59:01' prior: 50659358!
test22HighPotencyMineIsGoneAfterTriggering
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 4 by: 4 withHighPotencyMinesAt: {(4@4).}) 
				startingAt: 4
				lives: 3.
		
	3 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	3 timesRepeat: [ game moveUp; moveRight ].
	self assert: (game remainingLivesAre: 1).! !

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 19:59:03'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:05:19' prior: 50659344!
test23HighPotencyMineSendPlayerFlying
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5).}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	self assert: (game playerIsAt: (5@6)).! !

!classDefinition: #MineFieldTest category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:06:12'!
TestCase subclass: #MineFieldTest
	instanceVariableNames: 'randomToAdd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:06:11'!
setRandomToUp

	randomToAdd := 0@1.! !

!classDefinition: #MineFieldTest category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:06:41'!
TestCase subclass: #MineFieldTest
	instanceVariableNames: 'randomToAdd randomGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:06:40' prior: 50659411!
setRandomToUp

	randomGenerator := [ 0@1 ].! !

!classDefinition: #MineFieldTest category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:06:47'!
TestCase subclass: #MineFieldTest
	instanceVariableNames: 'randomGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:07:02'!
test23HighPotencyMineSendsPlayerFlying
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5).}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	self assert: (game playerIsAt: (5@6)).! !

!methodRemoval: MineFieldTest #test23HighPotencyMineSendPlayerFlying stamp: 'Matias Cra 11/30/2023 20:07:02'!
test23HighPotencyMineSendPlayerFlying
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5).}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].
	self assert: (game remainingLivesAre: 1).
	self assert: (game playerIsAt: (5@6)).!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:08:29' prior: 50659437!
test23HighPotencyMineSendsPlayerFlying
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5). (5@7).}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].

	self assert: (game playerIsAt: (5@6)).

	self setRandomToLeft.
	game moveUp.
	self assert: (game playerIsAt: (4@6)).! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:08:36'!
setRandomToLeft

	randomGenerator := [ 0@1 ].! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:08:46' prior: 50659478!
setRandomToLeft

	randomGenerator := [ -1@0 ].! !

[-1@0] value!

Object subclass: #LowPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #LowPotencyMine category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:09:37'!
Object subclass: #LowPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!LowPotencyMine methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 20:09:50'!
triggerOn: aMineFieldGame! !
!LowPotencyMine methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 20:10:26' prior: 50659501!
triggerOn: aMineFieldGame

	aMineFieldGame triggerLowPotencyMine.! !

!classDefinition: #MineFieldElement category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:10:50'!
Object subclass: #MineFieldElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #LowPotencyMine category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:10:50'!
MineFieldElement subclass: #LowPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldElement methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 20:11:07'!
triggering! !
!MineFieldElement methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 20:11:18'!
triggerOn: aMineFieldGame! !

!methodRemoval: MineFieldElement #triggering stamp: 'Matias Cra 11/30/2023 20:11:21'!
triggering!

MineFieldElement subclass: #HighPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #HighPotencyMine category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:11:41'!
MineFieldElement subclass: #HighPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

MineFieldElement subclass: #HighPotencyMine
	instanceVariableNames: 'randomProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #HighPotencyMine category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:12:05'!
MineFieldElement subclass: #HighPotencyMine
	instanceVariableNames: 'randomProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!HighPotencyMine class methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 20:12:20'!
with: aRandomPointProvider! !
!HighPotencyMine class methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 20:12:29' prior: 50659567!
with: aRandomPointProvider

	^ self new initializeWith: aRandomPointProvider ! !
!HighPotencyMine methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:12:59'!
triggerFor: aMineFieldGame! !
!HighPotencyMine methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:14:54' prior: 50659578!
triggerFor: aMineFieldGame

	aMineFieldGame triggerHighPotencyMine: (randomProvider randomPointInAreaBetween: (-3@-3) and: (3@3)).! !
!HighPotencyMine methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:15:57' prior: 50659583!
triggerFor: aMineFieldGame

	aMineFieldGame triggerHighPotencyMine! !

!methodRemoval: HighPotencyMine class #with: stamp: 'Matias Cra 11/30/2023 20:16:03'!
with: aRandomPointProvider

	^ self new initializeWith: aRandomPointProvider !
!HighPotencyMine methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:16:16' overrides: 50659532!
triggerOn: aMineFieldGame

	aMineFieldGame triggerHighPotencyMine! !

!methodRemoval: HighPotencyMine #triggerFor: stamp: 'Matias Cra 11/30/2023 20:16:16'!
triggerFor: aMineFieldGame

	aMineFieldGame triggerHighPotencyMine!
!MineFieldElement methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:16:22' prior: 50659532!
triggerOn: aMineFieldGame

	self subclassResponsibility ! !
!HighPotencyMine methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:16:27' prior: 50659602 overrides: 50659613!
triggerOn: aMineFieldGame

	aMineFieldGame triggerHighPotencyMine.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:17:11' prior: 50658589!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocationsAndPositions
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: #lowPotencyMine ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	lightArmorsLocations do: [ :tunel | 'TODO' ].
	
	^ board! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:17:43'!
triggerHighPotencyMine
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:17:58' prior: 50659653!
triggerHighPotencyMine
	lives := lives - 2.
	(board at: position y) at: position x put: #Empty.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:12'!
emptyCurrentPosition

	^ (board at: position y) at: position x put: #Empty! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:12' prior: 50658384!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		self emptyCurrentPosition.
		^ self.
	].

	(self elementAtCurrentPosition) = #highPotencyMine ifTrue: [
		lives := lives - 2.
		(board at: position y) at: position x put: #Empty.
		^ self.
	].
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:12' prior: 50659670!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		self emptyCurrentPosition.
		^ self.
	].

	(self elementAtCurrentPosition) = #highPotencyMine ifTrue: [
		lives := lives - 2.
		self emptyCurrentPosition.
		^ self.
	].
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:12' prior: 50659658!
triggerHighPotencyMine
	lives := lives - 2.
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:35' prior: 50659684!
triggerCurrentPositionEffect

	(self elementAtCurrentPosition) = #lowPotencyMine ifTrue: [
		lives := lives - 1.
		self emptyCurrentPosition.
		^ self.
	].

	(self elementAtCurrentPosition) = #highPotencyMine ifTrue: [
		self elementAtCurrentPosition triggerOn: self.
	].
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:46' prior: 50659703!
triggerCurrentPositionEffect

	self elementAtCurrentPosition triggerOn: self.

! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:18:53'!
triggerLowPotencyMine
	lives := lives - 2.
	self emptyCurrentPosition.! !
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 20:19:25'!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives randomPointProvider: randomPointProvider  

	self assertColumn: aColumnNumber inBoard: aBoard.	
	self assertPositiveLives: anAmountOfLives.
	^ self new initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives! !

!methodRemoval: MineFieldGame class #board:startingAt:lives: stamp: 'Matias Cra 11/30/2023 20:19:25'!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives 

	self assertColumn: aColumnNumber inBoard: aBoard.	
	self assertPositiveLives: anAmountOfLives.
	^ self new initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives!
!MineFieldGame class methodsFor: 'instance creation' stamp: 'Matias Cra 11/30/2023 20:19:32' prior: 50659727!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  

	self assertColumn: aColumnNumber inBoard: aBoard.	
	self assertPositiveLives: anAmountOfLives.
	^ self new initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 20:19:59'!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: randomPointProvider  
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false.
	lives := anAmountOfLives.! !
!MineFieldGame class methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 20:19:59' prior: 50659750!
board: aBoard startingAt: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  

	self assertColumn: aColumnNumber inBoard: aBoard.	
	self assertPositiveLives: anAmountOfLives.
	^ self new initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider! !

!methodRemoval: MineFieldGame #initializeWith:at:lives: stamp: 'Matias Cra 11/30/2023 20:19:59'!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives 
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false.
	lives := anAmountOfLives.!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 20:20:22' prior: 50659762!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false.
	lives := anAmountOfLives.! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:20:32'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board moved lives randomPointProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 20:20:31' prior: 50659794!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  
	
	board := aBoard.
	position := aColumnNumber@1.
	moved := false.
	lives := anAmountOfLives.
	randomPointProvider := aRandomPointProvider.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:21:16' prior: 50659697!
triggerHighPotencyMine
	lives := lives - 2.
	self moveTo: position + (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	self emptyCurrentPosition.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:21:46' prior: 50656224!
createGameWithBoard: aMineFieldBoard startingAt: aStartingColumn lives: startingLives 
	
	^ MineFieldGame board: aMineFieldBoard startingAt: aStartingColumn lives: startingLives randomPointProvider: self.! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:22:23'!
randomPointInAreaBetween: bottomLeftPoint and: topRightPoint.! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:22:28' prior: 50659483!
setRandomToLeft

	randomGenerator := [ -1@0 ].! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:22:32' prior: 50659843!
randomPointInAreaBetween: bottomLeftPoint and: topRightPoint! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:23:03' prior: 50659848!
setRandomToLeft

	randomGenerator := [ :bottomLeft :topRight | -1@0 ].! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:23:17' prior: 50659424!
setRandomToUp

	randomGenerator := [ :bottomLeft :topRight | 0@1 ].! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:23:25' prior: 50659853!
randomPointInAreaBetween: bottomLeftPoint and: topRightPoint

	^ randomGenerator value! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:23:36' prior: 50659870!
randomPointInAreaBetween: bottomLeftPoint and: topRightPoint

	^ randomGenerator value: bottomLeftPoint value: topRightPoint ! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:23:38'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:23:38'!
PASSED!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:23:58' prior: 50659825!
triggerHighPotencyMine
	lives := lives - 2.
	position := position + (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	self emptyCurrentPosition.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:24:03'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:24:04'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:24:06'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:24:06'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:24:11'!
ERROR!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:24:11'!
ERROR!

MineFieldElement subclass: #HighPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #HighPotencyMine category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:24:24'!
MineFieldElement subclass: #HighPotencyMine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

MineFieldElement subclass: #NoElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #NoElement category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:24:30'!
MineFieldElement subclass: #NoElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!NoElement methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:24:45' overrides: 50659613!
triggerOn: aMineFieldGame! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:25:09' prior: 50659625!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocationsAndPositions
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	lightArmorsLocations do: [ :tunel | 'TODO' ].
	
	^ board! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:25:21' prior: 50657224!
emptyRow: rowSize

	^ ((1 to: rowSize) collect: [ :number | NoElement new ]) asArray! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:25:24'!
FAILURE!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:25:24'!
FAILURE!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:25:24'!
FAILURE!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:25:24'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:25:24'!
ERROR!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:25:24'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:25:24'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:25:28'!
FAILURE!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:25:28'!
FAILURE!

game!

self createBoardOf: 4 by: 4 withLowPotencyMinesAt: {(1@2).}!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:26:21' prior: 50659721!
triggerLowPotencyMine
	lives := lives - 1.
	self emptyCurrentPosition.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:26:25'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:26:25'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:26:25'!
ERROR!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:26:25'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:26:25'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:26:31'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:26:31'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:26:40'!
ERROR!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:26:40'!
ERROR!

self elementAtCurrentPosition !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:27:33' prior: 50659966!
triggerHighPotencyMine
	lives := lives - 2.
	self emptyCurrentPosition.
	position := position + (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:27:42' prior: 50659664!
emptyCurrentPosition

	^ (board at: position y) at: position x put: NoElement new! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:27:45'!
ERROR!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:27:45'!
ERROR!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:27:45'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:27:45'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:27:50'!
ERROR!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:27:50'!
ERROR!
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 20:28:19' overrides: 16961394!
setUp

	randomGenerator := [ :bottomLeft :topRight | 0@0 ].! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:28:34'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:28:34'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:28:34'!
FAILURE!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:28:43'!
FAILURE!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:28:43'!
FAILURE!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:29:21'!
FAILURE!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:29:21'!
FAILURE!

game!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:30:06' prior: 50659464!
test23HighPotencyMineSendsPlayerFlying
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5). (5@7).}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].

	self assert: (game playerIsAt: (5@6)).

	self setRandomToLeft.
	game moveUp.
	self assert: (game playerIsAt: (4@7)).! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:30:07'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:31:44'!
test24TunelsWorksOneWay
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withHighPotencyMinesAt: {(5@5). (5@7).}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].

	self assert: (game playerIsAt: (5@6)).

	self setRandomToLeft.
	game moveUp.
	self assert: (game playerIsAt: (4@7)).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:32:24'!
createBoardOf: cols by: rows withTunels: tunelsLocations

	! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:32:38' prior: 50660650!
createBoardOf: cols by: rows withTunels: tunelsLocations

		^ self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: #() lightArmors: #() heavyArmors: #() tunels: tunelsLocations ! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:32:58' prior: 50660099!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	lightArmorsLocations do: [ :tunel | 'TODO' ].
	
	^ board! !

!classDefinition: #Tunel category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:35:25'!
MineFieldElement subclass: #Tunel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:35:15' prior: 50660665!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	tunelsLocations do: [ :tunelLocations |
		| firstLocation secondLocation tunel |
		firstLocation := tunelLocations first.
		secondLocation := tunelLocations second.
		tunel := Tunel between: firstLocation and: secondLocation
	].
	
	^ board! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 20:35:52' prior: 50660700!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #lightArmor ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	tunelsLocations do: [ :tunelLocations |
		| firstLocation secondLocation tunel |
		firstLocation := tunelLocations first.
		secondLocation := tunelLocations second.
		tunel := Tunel between: firstLocation and: secondLocation.
		self inLocation: firstLocation ofBoard: board put: tunel.
		self inLocation: secondLocation ofBoard: board put: tunel.
	].
	^ board! !
!Tunel methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:38:01' overrides: 50659613!
triggerOn: aMineFieldGame

	aMineFieldGame triggerTunel.! !
!Tunel class methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 20:38:32'!
between: aLocation and: anotherLocation

	^ self new initializeBetween: aLocation and: anotherLocation! !
!Tunel methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:38:45'!
initializeBetween: aLocation and: anotherLocation! !

!classDefinition: #Tunel category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:39:06'!
MineFieldElement subclass: #Tunel
	instanceVariableNames: 'firstLocation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!Tunel methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 20:39:05' prior: 50660781!
initializeBetween: aLocation and: anotherLocation

	firstLocation := aLocation.! !

!classDefinition: #Tunel category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 20:39:14'!
MineFieldElement subclass: #Tunel
	instanceVariableNames: 'firstLocation secondLocation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!Tunel methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 20:39:13' prior: 50660794!
initializeBetween: aLocation and: anotherLocation

	firstLocation := aLocation.
	secondLocation := anotherLocation.! !
!Tunel methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:40:26' prior: 50660770 overrides: 50659613!
triggerOn: aMineFieldGame

	(aMineFieldGame playerIsAt: firstLocation)
		ifTrue: [ aMineFieldGame triggerTunelTo: secondLocation ].
		
	(aMineFieldGame playerIsAt: secondLocation)
		ifTrue: [ aMineFieldGame triggerTunelTo: firstLocation ].! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:42:27' prior: 50660636!
test24TunelsWorksOneWay
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 5
				lives: 3.
		
	self setRandomToUp.
	4 timesRepeat: [ game moveUp. ].

	self assert: (game playerIsAt: (5@6)).

	self setRandomToLeft.
	game moveUp.
	self assert: (game playerIsAt: (4@7)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:43:04' prior: 50660828!
test24TunelsWorksOneWay
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 5
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:44:00'!
triggerTunelTo: aNewLocation

	! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:44:13' prior: 50660854!
triggerTunelTo: aNewPosition

	position := aNewPosition 	! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:45:31' prior: 50660225!
triggerLowPotencyMine

	lives := lives - 1.
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 20:45:38' prior: 50660329!
triggerHighPotencyMine

	lives := lives - 2.
	self emptyCurrentPosition.
	position := position + (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:46:20'!
test24TunelsWorksBothWays
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 5
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:46:27'!
test25TunelsWorksBothWays
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 5
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !

!methodRemoval: MineFieldTest #test24TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:46:27'!
test24TunelsWorksBothWays
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 5
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).!

!testRun: #MineFieldTest #test25TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:46:28'!
FAILURE!

!testRun: #MineFieldTest #test25TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:46:28'!
FAILURE!

!testRun: #MineFieldTest #test25TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:46:43'!
FAILURE!

!testRun: #MineFieldTest #test25TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:46:43'!
FAILURE!

game!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:47:08' prior: 50660892!
test25TunelsWorksBothWays
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:47:11' prior: 50660843!
test24TunelsWorksOneWay
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).! !

!testRun: #MineFieldTest #test24TunelsWorksOneWay stamp: 'Matias Cra 11/30/2023 20:47:13'!
FAILURE!

!testRun: #MineFieldTest #test24TunelsWorksOneWay stamp: 'Matias Cra 11/30/2023 20:47:13'!
FAILURE!

game!

game!

self elementAtCurrentPosition!

aMineFieldGame playerIsAt: firstLocation!
!Tunel methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 20:49:01' prior: 50660817 overrides: 50659613!
triggerOn: aMineFieldGame

	(aMineFieldGame playerIsAt: firstLocation)
		ifTrue: [ ^ aMineFieldGame triggerTunelTo: secondLocation ].
		
	(aMineFieldGame playerIsAt: secondLocation)
		ifTrue: [ ^ aMineFieldGame triggerTunelTo: firstLocation ].! !

!testRun: #MineFieldTest #test24TunelsWorksOneWay stamp: 'Matias Cra 11/30/2023 20:49:04'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:49:05'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:49:14'!
test24TunelWorksOneWay
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).! !

!methodRemoval: MineFieldTest #test24TunelsWorksOneWay stamp: 'Matias Cra 11/30/2023 20:49:14'!
test24TunelsWorksOneWay
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:49:23'!
test25TunelsWorkBothWays
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !

!methodRemoval: MineFieldTest #test25TunelsWorksBothWays stamp: 'Matias Cra 11/30/2023 20:49:23'!
test25TunelsWorksBothWays
	| game |
	game :=  self createGameWithBoard: (self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:49:59' prior: 50661002!
test25TunelsWorkBothWays
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withTunels: {Array with: 1@2 with: 10@10}
				) 
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:50:41' prior: 50661028!
test25TunelsWorkBothWays
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withTunels: {{(1@2). (10@10).}}
				)
				startingAt: 1
				lives: 3.
		

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 20:50:44'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 20:50:46'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:50:55' prior: 50661041!
test25TunelsWorkBothWays
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withTunels: {{(1@2). (10@10).}}
				)
				startingAt: 1
				lives: 3.

	game moveUp.
	self assert: (game playerIsAt: (10@10)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:50:59' prior: 50660981!
test24TunelWorksOneWay
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withTunels: {{(1@2). (10@10).}}
				)
				startingAt: 1
				lives: 3.

	game moveUp.
	self assert: (game playerIsAt: (10@10)).! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 20:51:01'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:51:59' prior: 50654836!
test99TODO
	
	"Volar recursivo"
	"El campo debe ser rectangular y tener elementos validos"! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:52:45' prior: 50661172!
test99TODO
	
	"Ganar/Perder"
	"Volar recursivo"
	"El campo debe ser rectangular y tener elementos validos"! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:54:06'!
test26LightArmorPreventsDamageFromMines! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:55:29' prior: 50661184!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withLowPotencyMinesAt: {(1@2)}
				) 
				startingAt: 5
				lives: 3.
		! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:56:06' prior: 50661189!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withLowPotencyMinesAt: {(1@3).} lightArmorAt: {(1@2).}
				) 
				startingAt: 1
				lives: 3.
	game moveUp.
	self! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:56:19' prior: 50661199!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withLowPotencyMinesAt: {(1@3).} lightArmorAt: {(1@2).}
				) 
				startingAt: 1
				lives: 3.
	game moveUp.
	self assert: game playerHasLightArmor.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:57:00' prior: 50661210!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withLowPotencyMinesAt: {(1@3).} lightArmorAt: {(1@2).}
				) 
				startingAt: 1
				lives: 3.
	game moveUp.
	self assert: game playerHasLightArmor.
	game moveUp.
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:57:38' prior: 50661222!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 
						withLowPotencyMinesAt: {(1@3).} 
						highPotencyMines: {(1@5).}
						lightArmorAt: {(1@2). (1@4)}
				) 
				startingAt: 1
				lives: 3.
	game moveUp.
	self assert: game playerHasLightArmor.
	game moveUp.
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:57:57' prior: 50661236!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 
						withLowPotencyMinesAt: {(1@3).} 
						highPotencyMines: {(1@5).}
						lightArmorAt: {(1@2). (1@4)}
				) 
				startingAt: 1
				lives: 3.
	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:58:44' prior: 50661178!
test99TODO
	
	"Ganar/Perder"
	"Volar recursivo"
	"El campo debe ser rectangular y tener elementos validos"
	"Emprolijar tests"! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 20:59:26' prior: 50661251!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 
						withLowPotencyMinesAt: {(1@3).} 
						highPotencyMinesAt: {(1@5).}
						lightArmor: {(1@2). (1@4)}
				) 
				startingAt: 1
				lives: 3.
	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:00:07'!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: #() tunels: #()! !

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:00:18'!
ERROR!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:00:18'!
ERROR!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:01:39' prior: 50661272!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withLowPotencyMinesAt: {(1@3).} highPotencyMinesAt: {(1@5).} lightArmors: {(1@2). (1@4)}
				) 
				startingAt: 1
				lives: 3.
	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:01:50' prior: 50661308!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3).} 
						 highPotencyMinesAt: {(1@5).} 
						 lightArmors: {(1@2). (1@4)}
				) 
				startingAt: 1
				lives: 3.
	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:01:58' prior: 50661322!
test26LightArmorPreventsDamageFromMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3).} 
						 highPotencyMinesAt: {(1@5).} 
						 lightArmors: {(1@2). (1@4)}
				) 
				startingAt: 1
				lives: 3.

	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:02:09' prior: 50661265!
test99TODO
	
	"Ganar/Perder"
	"Volar recursivo"
	"El campo debe ser rectangular, minimo de 2x2 y tener elementos validos"
	"Emprolijar tests"! !

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:02:28'!
ERROR!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:02:28'!
ERROR!

MineFieldElement subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #LightArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:02:41'!
MineFieldElement subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classRenamed: #LightArmor as: #LightArmorPickup stamp: 'Matias Cra 11/30/2023 21:03:09'!
Smalltalk renameClassNamed: #LightArmor as: #LightArmorPickup!

!classRenamed: #LightArmorPickup as: #LightArmor stamp: 'Matias Cra 11/30/2023 21:04:00'!
Smalltalk renameClassNamed: #LightArmorPickup as: #LightArmor!
!LightArmor methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 21:04:22' overrides: 50659613!
triggerOn: aMineFieldGame

	aMineFieldGame triggerLightArmor.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:04:33'!
triggerLightArmor

	lives := lives - 1.
	self emptyCurrentPosition.! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:04:43'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board moved lives randomPointProvider armor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:04:42' prior: 50661393!
triggerLightArmor

	armor := #lightArmor.
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:05:43' prior: 50660871!
triggerHighPotencyMine
	
	armor ifNil: [
		lives := lives - 2.
	]
	self emptyCurrentPosition.
	position := position + (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:05:45' prior: 50661415!
triggerHighPotencyMine
	
	armor ifNil: [
		lives := lives - 2.
	].
	self emptyCurrentPosition.
	position := position + (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
! !

2@2/2!

2@2//2!

1@1//2!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:06:45' prior: 50661425!
triggerHighPotencyMine
	| amountToFly |
	armor ifNil: [
		lives := lives - 2.
	].
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:06:56' prior: 50661436!
triggerHighPotencyMine
	| amountToFly |
	armor ifNil: [
		lives := lives - 2.
	].

	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:06:58' prior: 50661449!
triggerHighPotencyMine
	| amountToFly |
	armor ifNil: [
		lives := lives - 2.
	].
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:07:03' prior: 50661409!
triggerLightArmor

	armor := #lightArmor.
! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:07:10'!
ERROR!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:07:10'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:07:10'!
ERROR!
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:07:24' prior: 50660733!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: LightArmor new ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: #heavyArmor ].
	
	tunelsLocations do: [ :tunelLocations |
		| firstLocation secondLocation tunel |
		firstLocation := tunelLocations first.
		secondLocation := tunelLocations second.
		tunel := Tunel between: firstLocation and: secondLocation.
		self inLocation: firstLocation ofBoard: board put: tunel.
		self inLocation: secondLocation ofBoard: board put: tunel.
	].
	^ board! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:07:26'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:07:26'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:07:26'!
FAILURE!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:07:52' prior: 50660865!
triggerLowPotencyMine
	
	armor ifNil: [
		lives := lives - 1.
	]
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:07:52' prior: 50661708!
triggerLowPotencyMine
	
	armor ifNil: [
		lives := lives - 1.
	].
	self emptyCurrentPosition.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:07:55'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:09:18'!
test27LightArmorHalvesFlightFromHighPotencyMines! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:09:49' prior: 50661813!
test27LightArmorHalvesFlightFromHighPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:10:17' prior: 50661818!
test27LightArmorHalvesFlightFromHighPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	4 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:10:23' prior: 50661831!
test27LightArmorHalvesFlightFromHighPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	2 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:10:51' prior: 50661845!
test27LightArmorHalvesFlightFromHighPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	2 timesRepeat: [ game moveUp ].
	self assert: (game remainingLivesAre: 3).
	self assert: (game playerIsAt: (2@3)).! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:11:08'!
createBoardOf: cols by: rows withHighPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: #() tunels: #()! !
!MineFieldTest methodsFor: 'random' stamp: 'Matias Cra 11/30/2023 21:11:20'!
setRandomToThreeToTheRight

	randomGenerator := [ :bottomLeft :topRight | 3@0 ].! !

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:11:23'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:12:20'!
test28LightArmorBreaksWithMine
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp.
	game assert: game playerHasLightArmor.
	self assert: (game remainingLivesAre: 3).
	self assert: (game playerIsAt: (2@3)).! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:12:43' prior: 50661895!
test28LightArmorBreaksWithMine
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp.
	game assert: game playerHasLightArmor.
	game moveUp.
	self deny: game playerHasLightArmor.! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 21:13:00'!
playerHasLightArmor

	^ armor = #lightArmor! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:13:32' prior: 50661715!
triggerLowPotencyMine
	
	armor ifNil: [
		lives := lives - 1.
	].
	armor := nil.
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:13:43' prior: 50661461!
triggerHighPotencyMine
	| amountToFly |
	armor ifNil: [
		lives := lives - 2.
	].
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := nil.
	position := position + amountToFly 
! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:13:48'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:14:25'!
test29LightArmorDisappearsFromBoardAfterPickup
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp.
	game assert: game playerHasLightArmor.
	game moveUp.
	self deny: game playerHasLightArmor.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:14:51' prior: 50662049!
test29LightArmorDisappearsFromBoardAfterPickup
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3).} 
						 lightArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp; moveUp; moveDown.
	self deny: game playerHasLightArmor.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:15:15'!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations lightArmors: lightArmorsLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: #() lightArmors: lightArmorsLocations heavyArmors: #() tunels: #()! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:15:20'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:15:20'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:15:20'!
FAILURE!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:15:32' prior: 50661474!
triggerLightArmor

	armor := #lightArmor.
	self emptyCurrentPosition.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:15:35'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:16:19'!
test30LightGetsReplacedWithHeavyArmor
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 lightArmors: {(1@2).}
						 heavyArmors: {(1@3).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp; moveUp; moveDown.
	self deny: game playerHasLightArmor.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:16:41' prior: 50662306!
test30LightGetsReplacedWithHeavyArmor
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 lightArmors: {(1@2).}
						 heavyArmors: {(1@3).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp.
	self assert: game playerHasLightArmor.
	game moveUp.
	self deny: game playerHasLightArmor.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:16:55' prior: 50662320!
test30LightGetsReplacedWithHeavyArmor
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 lightArmors: {(1@2).}
						 heavyArmors: {(1@3).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp.
	self assert: game playerHasLightArmor.
	game moveUp.
	self deny: game playerHasLightArmor.
	self assert: game playerHasHeavyArmor.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:17:30'!
createBoardOf: cols by: rows lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: #() lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: #()! !

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:17:38'!
ERROR!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:17:38'!
ERROR!

MineFieldElement subclass: #HeavyArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #HeavyArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:17:46'!
MineFieldElement subclass: #HeavyArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!HeavyArmor methodsFor: 'triggering' stamp: 'Matias Cra 11/30/2023 21:18:26' overrides: 50659613!
triggerOn: aMineFieldGame

	aMineFieldGame triggerHeavyArmor.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:18:51' prior: 50661575!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: LightArmor new ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: HeavyArmor new ].
	
	tunelsLocations do: [ :tunelLocations |
		| firstLocation secondLocation tunel |
		firstLocation := tunelLocations first.
		secondLocation := tunelLocations second.
		tunel := Tunel between: firstLocation and: secondLocation.
		self inLocation: firstLocation ofBoard: board put: tunel.
		self inLocation: secondLocation ofBoard: board put: tunel.
	].
	^ board! !

!classRenamed: #LightArmor as: #LightArmorPickup stamp: 'Matias Cra 11/30/2023 21:19:02'!
Smalltalk renameClassNamed: #LightArmor as: #LightArmorPickup!
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 21:19:02' prior: 50662387!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: LightArmorPickup new ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: HeavyArmor new ].
	
	tunelsLocations do: [ :tunelLocations |
		| firstLocation secondLocation tunel |
		firstLocation := tunelLocations first.
		secondLocation := tunelLocations second.
		tunel := Tunel between: firstLocation and: secondLocation.
		self inLocation: firstLocation ofBoard: board put: tunel.
		self inLocation: secondLocation ofBoard: board put: tunel.
	].
	^ board! !

!classRenamed: #HeavyArmor as: #HeavyArmorPickup stamp: 'Matias Cra 11/30/2023 21:19:11'!
Smalltalk renameClassNamed: #HeavyArmor as: #HeavyArmorPickup!
!MineFieldTest methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 21:19:11' prior: 50662429!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: highPotencyMinesLocations lightArmors: lightArmorsLocations heavyArmors: heavyArmorsLocations tunels: tunelsLocations
	| board |
	board := self emptyBoardWithOf: cols by: rows.
	lowPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: LowPotencyMine new ].
	highPotencyMinesLocations do: [ :location | self inLocation: location ofBoard: board put: HighPotencyMine new ].
	lightArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: LightArmorPickup new ].
	heavyArmorsLocations do: [ :location | self inLocation: location ofBoard: board put: HeavyArmorPickup new ].
	
	tunelsLocations do: [ :tunelLocations |
		| firstLocation secondLocation tunel |
		firstLocation := tunelLocations first.
		secondLocation := tunelLocations second.
		tunel := Tunel between: firstLocation and: secondLocation.
		self inLocation: firstLocation ofBoard: board put: tunel.
		self inLocation: secondLocation ofBoard: board put: tunel.
	].
	^ board! !

Object subclass: #PlayerArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #PlayerArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:19:41'!
Object subclass: #PlayerArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 21:21:09' prior: 50659813!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  
	
	board := aBoard.
	position := aColumnNumber@1.
	lives := anAmountOfLives.
	randomPointProvider := aRandomPointProvider.! !

!classDefinition: #MineFieldGame category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:21:14'!
Object subclass: #MineFieldGame
	instanceVariableNames: 'position board lives randomPointProvider armor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!PlayerArmor methodsFor: 'no messages' stamp: 'Matias Cra 11/30/2023 21:23:29'!
damageTaken: anAmountOfLives
	
	self subclassResponsibility ! !
!PlayerArmor methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 21:24:28'!
makeFlyBy: aPointDisplacement! !
!PlayerArmor methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 21:24:32' prior: 50662546!
makeFlyBy: aPointDisplacement
	self subclassResponsibility ! !
!PlayerArmor methodsFor: 'as yet unclassified' stamp: 'Matias Cra 11/30/2023 21:24:33' prior: 50662551!
makeFlyBy: aPointDisplacement

	self subclassResponsibility ! !

PlayerArmor subclass: #NoArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #NoArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:24:57'!
PlayerArmor subclass: #NoArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:25:05' overrides: 50662541!
damageTaken: a! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:25:16' prior: 50662574 overrides: 50662541!
damageTaken:  anAmountOfLives
	
	^ anAmountOfLives ! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:25:20' prior: 50662578 overrides: 50662541!
damageTaken: anAmountOfLives

	^ anAmountOfLives ! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:25:42' overrides: 50662557!
makeFlyBy: aPointDisplacement

	^ aPointDisplacement ! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:26:02' prior: 50662589 overrides: 50662557!
makeFlyBy: aPointToFlyBy

	^ aPointToFlyBy ! !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:26:21' prior: 50662557!
makeFlyBy: aPointToFlyBy

	self subclassResponsibility ! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 21:26:43' prior: 50662521!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  
	
	board := aBoard.
	position := aColumnNumber@1.
	lives := anAmountOfLives.
	randomPointProvider := aRandomPointProvider.
	armor := NoArmor new.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:26:56' prior: 50661937!
triggerHighPotencyMine
	| amountToFly |
	armor takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := nil.
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:27:35' prior: 50662617!
triggerHighPotencyMine
	| amountToFly |
	lives := lives - (armor damageTaken: 2)
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := nil.
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:27:46' prior: 50662630!
triggerHighPotencyMine
	| amountToFly a |
	a:=2.
	lives := lives - (armor damageTaken: a)
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := nil.
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:28:20'!
takeDamage: anAmountOfLives

	^ lives := lives - (armor damageTaken: anAmountOfLives)! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:28:20' prior: 50662644!
triggerHighPotencyMine
	| amountToFly a |
	a:=2.
	self takeDamage: a
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := nil.
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:28:29' prior: 50662665!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := nil.
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:29:05' prior: 50662678!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := NoArmor new.
	position := position + amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:29:57' prior: 50662691!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := NoArmor new.
	position := position + armor  
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:30:21' prior: 50662704!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := NoArmor new.
	position := position + armor makeFlyBy: amountToFly 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:30:25' prior: 50662717!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor = #lightArmor ifTrue: [
		amountToFly := amountToFly // 2
	].
	armor := NoArmor new.
	position := position + (armor makeFlyBy: amountToFly) 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:30:30' prior: 50662731!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor := NoArmor new.
	position := position + (armor makeFlyBy: amountToFly) 
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:31:20' prior: 50662745!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := armor makeFlyBy: (randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)).
	armor := NoArmor new.
	position := position + amountToFly.
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:31:56'!
getRandomFlightDisplacement

	^ randomPointProvider randomPointInAreaBetween: (-3@3) and: (3@3)! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:31:57' prior: 50662757!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := armor makeFlyBy: (self getRandomFlightDisplacement).
	armor := NoArmor new.
	position := position + amountToFly.
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:33:41' prior: 50661930!
triggerLowPotencyMine
	
	self takeDamage: 1.
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:33:58'!
loseArmor

	^ armor := NoArmor new! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:33:58' prior: 50662775!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := armor makeFlyBy: (self getRandomFlightDisplacement).
	self loseArmor.
	position := position + amountToFly.
! !
!MineFieldGame methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 21:33:58' prior: 50662605!
initializeWith: aBoard at: aColumnNumber lives: anAmountOfLives randomPointProvider: aRandomPointProvider  
	
	board := aBoard.
	position := aColumnNumber@1.
	lives := anAmountOfLives.
	randomPointProvider := aRandomPointProvider.
	self loseArmor.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:35:16'!
triggerHeavyArmor

	armor := #lightArmor.
	self emptyCurrentPosition.! !

PlayerArmor subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #LightArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:35:29'!
PlayerArmor subclass: #LightArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

LightArmor class
	instanceVariableNames: ''!

!classDefinition: 'LightArmor class' category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:35:29'!
LightArmor class
	instanceVariableNames: ''!
!LightArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:35:29' overrides: 50662541!
damageTaken: anAmountOfLives

	^ anAmountOfLives ! !
!LightArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:35:29' overrides: 50662600!
makeFlyBy: aPointToFlyBy

	^ aPointToFlyBy ! !
!LightArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:35:34' prior: 50662843 overrides: 50662541!
damageTaken: anAmountOfLives

	^ 0! !
!LightArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:35:38' prior: 50662848 overrides: 50662600!
makeFlyBy: aPointToFlyBy

	^ aPointToFlyBy // 2! !

PlayerArmor subclass: #HeavyArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

!classDefinition: #HeavyArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:35:52'!
PlayerArmor subclass: #HeavyArmor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!

HeavyArmor class
	instanceVariableNames: ''!

!classDefinition: 'HeavyArmor class' category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:35:52'!
HeavyArmor class
	instanceVariableNames: ''!
!HeavyArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:35:52' overrides: 50662541!
damageTaken: anAmountOfLives

	^ 0! !
!HeavyArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:35:52' overrides: 50662600!
makeFlyBy: aPointToFlyBy

	^ aPointToFlyBy // 2! !
!HeavyArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:36:04' prior: 50662887 overrides: 50662600!
makeFlyBy: aPointToFlyBy

	^ 0@0! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:36:21' prior: 50662198!
triggerLightArmor

	armor := LightArmor new.
	self emptyCurrentPosition.! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:36:30' prior: 50662818!
triggerHeavyArmor

	armor := HeavyArmor new.
	self emptyCurrentPosition.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:36:44'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:36:44'!
PASSED!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:37:17' prior: 50662786!
triggerLowPotencyMine
	
	self takeDamage: 1.
	self loseArmor.
	self emptyCurrentPosition.! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:37:20'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:37:20'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:37:29'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:37:29'!
PASSED!
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 21:38:03' prior: 50661925!
playerHasLightArmor

	^ armor isKindOf: LightArmor ! !
!MineFieldGame methodsFor: 'testing' stamp: 'Matias Cra 11/30/2023 21:38:14'!
playerHasHeavyArmor

	^ armor isKindOf: HeavyArmor ! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:38:19'!
PASSED!
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:04'!
lowPotencyMineTaken! !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:09'!
highPotencyMineTaken! !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:13' prior: 50663346!
highPotencyMineTaken
	
	self subclassResponsibility ! !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:17' prior: 50663342!
lowPotencyMineTaken

	self subclassResponsibility ! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:24' overrides: 50663355!
lowPotencyMineTaken

	self subclassResponsibility ! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:27' prior: 50663360 overrides: 50663355!
lowPotencyMineTaken
! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:39:29' overrides: 50663350!
highPotencyMineTaken
! !
!LightArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:01'!
lowPotencyMineTakenIn: aMineFieldGame

	aMineFieldGame loseArmor.! !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:08'!
lowPotencyMineTakenIn: aMineFieldGame

	aMineFieldGame loseArmor.! !

!methodRemoval: PlayerArmor #highPotencyMineTaken stamp: 'Matias Cra 11/30/2023 21:40:10'!
highPotencyMineTaken
	
	self subclassResponsibility !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:21'!
highPotencyMineTakenIn: aMineFieldGame

	self subclassResponsibility.! !
!PlayerArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:27' prior: 50663378!
lowPotencyMineTakenIn: aMineFieldGame

	self subclassResponsibility.! !
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:32' overrides: 50663394!
lowPotencyMineTakenIn: aMineFieldGame

! !

!methodRemoval: NoArmor #lowPotencyMineTaken stamp: 'Matias Cra 11/30/2023 21:40:33'!
lowPotencyMineTaken
!
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:46' overrides: 50663388!
highPotencyMineTakenIn: aMineFieldGame

	aMineFieldGame loseArmor.! !

!methodRemoval: NoArmor #highPotencyMineTaken stamp: 'Matias Cra 11/30/2023 21:40:48'!
highPotencyMineTaken
!
!NoArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:40:50' prior: 50663408 overrides: 50663388!
highPotencyMineTakenIn: aMineFieldGame

! !
!LightArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:41:01' overrides: 50663388!
highPotencyMineTakenIn: aMineFieldGame

	aMineFieldGame loseArmor.! !
!HeavyArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:41:06' overrides: 50663388!
highPotencyMineTakenIn: aMineFieldGame

	aMineFieldGame loseArmor.! !

!classDefinition: #HeavyArmor category: 'ISW1-2023-2C-2doParcial' stamp: 'Matias Cra 11/30/2023 21:41:37'!
PlayerArmor subclass: #HeavyArmor
	instanceVariableNames: 'lowPotencyMinesTaken'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-2C-2doParcial'!
!HeavyArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:41:36' overrides: 50663394!
lowPotencyMineTakenIn: aMineFieldGame
	
	lowPotencyMinesTaken
	aMineFieldGame loseArmor.! !
!HeavyArmor methodsFor: 'armor' stamp: 'Matias Cra 11/30/2023 21:41:56' prior: 50663442 overrides: 50663394!
lowPotencyMineTakenIn: aMineFieldGame
	
	lowPotencyMinesTaken := lowPotencyMinesTaken - 1.
	lowPotencyMinesTaken = 0 ifTrue: [ aMineFieldGame loseArmor. ]! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:42:39' prior: 50662797!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := armor makeFlyBy: (self getRandomFlightDisplacement).
	armor highPotencyMineTakenIn: self.
	position := position + amountToFly.
! !
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:42:51' prior: 50663013!
triggerLowPotencyMine
	
	self takeDamage: 1.
	armor lowPotencyMineTakenIn: self.
	self emptyCurrentPosition.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:43:39'!
test31HeavyArmorWithstandsTwoLowPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).}
						 heavyArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp.
	self assert: game playerHasLightArmor.
	game moveUp.
	self deny: game playerHasLightArmor.
	self assert: game playerHasHeavyArmor.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:43:56' prior: 50663475!
test31HeavyArmorWithstandsTwoLowPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withHighPotencyMinesAt: {(1@3).}
						 heavyArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp; moveUp.
	self assert: game playerHasHeavyArmor.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:44:20'!
createBoardOf: cols by: rows withHighPotencyMinesAt: highPotencyMinesLocations heavyArmors: heavyArmorsLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: #() highPotencyMinesAt: highPotencyMinesLocations lightArmors: #() heavyArmors: heavyArmorsLocations tunels: #()! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:23'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:44:23'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:23'!
FAILURE!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:44:27'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:29'!
FAILURE!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:29'!
FAILURE!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:44:32'!
PASSED!

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:33'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:44:33'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:33'!
FAILURE!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:44'!
FAILURE!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:44:44'!
FAILURE!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:44:56' prior: 50663491!
test31HeavyArmorWithstandsTwoLowPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3).}
						 heavyArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp; moveUp.
	self assert: game playerHasHeavyArmor.! !
!MineFieldTest methodsFor: 'support' stamp: 'Matias Cra 11/30/2023 21:45:19'!
createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations heavyArmors: heavyArmorsLocations

	^ self createBoardOf: cols by: rows withLowPotencyMinesAt: lowPotencyMinesLocations highPotencyMinesAt: #() lightArmors: #() heavyArmors: heavyArmorsLocations tunels: #()! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:45:29' prior: 50663768!
test31HeavyArmorWithstandsTwoLowPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3). (1@4).}
						 heavyArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp; moveUp.
	self assert: game playerHasHeavyArmor.! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:45:43' prior: 50663793!
test31HeavyArmorWithstandsTwoLowPotencyMines
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10
						 withLowPotencyMinesAt: {(1@3). (1@4).}
						 heavyArmors: {(1@2).}
				) 
				startingAt: 1
				lives: 3.

	self setRandomToThreeToTheRight.
	game moveUp; moveUp.
	self assert: game playerHasHeavyArmor.
	game moveUp.
	self deny: game playerHasHeavyArmor.! !

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:45:45'!
ERROR!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:45:45'!
ERROR!
!HeavyArmor methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 21:46:12' overrides: 16920235!
initialize

	! !
!HeavyArmor methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 21:46:28' prior: 50663830 overrides: 16920235!
initialize

	lowPotencyMinesTaken := 0! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:30'!
FAILURE!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:46:30'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:30'!
FAILURE!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:34'!
FAILURE!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:34'!
FAILURE!
!HeavyArmor methodsFor: 'initialization' stamp: 'Matias Cra 11/30/2023 21:46:43' prior: 50663835 overrides: 16920235!
initialize

	lowPotencyMinesTaken := 2! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:46:49'!
PASSED!
!MineFieldGame methodsFor: 'triggering - private' stamp: 'Matias Cra 11/30/2023 21:47:51' prior: 50663458!
triggerHighPotencyMine
	| amountToFly |
	self takeDamage: 2.
	self emptyCurrentPosition.
	amountToFly := armor makeFlyBy: (self getRandomFlightDisplacement).
	armor highPotencyMineTakenIn: self.
	"TODO: testear cambiar por moveTo: para hacerlo recursivo"
	position := position + amountToFly.
! !
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:49:08' prior: 50661073!
test24TunelWorksOneWay
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withTunels: {{(1@2). (9@9).}}
				)
				startingAt: 1
				lives: 3.

	game moveUp.
	self assert: (game playerIsAt: (9@9)).! !

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:49:10'!
PASSED!
!MineFieldTest methodsFor: 'tests' stamp: 'Matias Cra 11/30/2023 21:49:20' prior: 50661060!
test25TunelsWorkBothWays
	| game |
	game :=  self createGameWithBoard: (
					self createBoardOf: 10 by: 10 withTunels: {{(1@2). (9@9).}}
				)
				startingAt: 1
				lives: 3.

	game moveUp.
	self assert: (game playerIsAt: (9@9)).
	game moveLeft; moveRight.
	self assert: (game playerIsAt: (1@2)).! !

!testRun: #MineFieldTest #test01PlayerCanStartAt1x1 stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test02PlayerCanStartAnywhereInFirstRow stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test03PlayerCannotStartOutsideTheField stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test04PlayerMustStartAtAValidColumnNumber stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test05PlayerAlwaysStartsInFirstRow stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test06CreatedGameHasFiveByFiveBoard stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test07CreatedGameHasConfiguredBoardSize stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test08PlayerCanMoveUp stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test09PlayerCanMoveRight stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test10PlayerCanMoveDown stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test11PlayerCanMoveLeft stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test12PlayerCanMoveMultipleTimes stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test13PlayerCannotMoveOutsideOfBoard stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test14PlayerCanStartWith3Lives stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test15PlayerCanStartWithConfiguredLives stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test16StartingLivesMustBePositive stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test17StartingLivesMustIntegers stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test18LowPotencyMineTakesALife stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test19LowPotencyMineTakesALifeMovingFromAnywhere stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test20LowPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test21HighPotencyMineTakesTwoLives stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test22HighPotencyMineIsGoneAfterTriggering stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test23HighPotencyMineSendsPlayerFlying stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test24TunelWorksOneWay stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test25TunelsWorkBothWays stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test26LightArmorPreventsDamageFromMines stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test27LightArmorHalvesFlightFromHighPotencyMines stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test28LightArmorBreaksWithMine stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test29LightArmorDisappearsFromBoardAfterPickup stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test30LightGetsReplacedWithHeavyArmor stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test31HeavyArmorWithstandsTwoLowPotencyMines stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!

!testRun: #MineFieldTest #test99TODO stamp: 'Matias Cra 11/30/2023 21:49:21'!
PASSED!
!PlayerArmor commentStamp: '<historical>' prior: 0!
TODO: conviene usar un state completo?!
TODO: conviene usar un state completo?!
!Tunel commentStamp: '<historical>' prior: 0!
TODO: seguramente es mejor usar "patas" para no tener informacion rebundante!
TODO: seguramente es mejor usar "patas" para no tener informacion rebundante!
TODO: conviene usar un state completo?!
TODO: seguramente es mejor usar "patas" para no tener informacion rebundante!
TODO: conviene usar un state completo?!
TODO: seguramente es mejor usar "patas" para no tener informacion rebundante!
TODO: conviene usar un state completo?!

----QUIT----(30 November 2023 21:52:57) CuisUniversity-5981.image priorSource: 10476705!